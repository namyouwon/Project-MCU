
Project_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd8  08004bd8  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd8  08004bd8  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000025c  08004e3c  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004e3c  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010799  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002827  00000000  00000000  00030a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001826b  00000000  00000000  00034d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c9  00000000  00000000  0004cf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3ed  00000000  00000000  0005d93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  000e8d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000025c 	.word	0x2000025c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ae8 	.word	0x08004ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000260 	.word	0x20000260
 8000148:	08004ae8 	.word	0x08004ae8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <readKey>:
int MAX_KEY = 4;
int TimerForKeypress[20] = {200};
int flag_short[20] = {0};
int flag_long[20] = {0};

void readKey(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	Key[0] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin); //pedestrian
 8000160:	2101      	movs	r1, #1
 8000162:	4810      	ldr	r0, [pc, #64]	; (80001a4 <readKey+0x48>)
 8000164:	f001 fe20 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <readKey+0x4c>)
 800016e:	601a      	str	r2, [r3, #0]
	Key[1] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin); // mode
 8000170:	2102      	movs	r1, #2
 8000172:	480c      	ldr	r0, [pc, #48]	; (80001a4 <readKey+0x48>)
 8000174:	f001 fe18 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <readKey+0x4c>)
 800017e:	605a      	str	r2, [r3, #4]
	Key[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin); //time
 8000180:	2110      	movs	r1, #16
 8000182:	4808      	ldr	r0, [pc, #32]	; (80001a4 <readKey+0x48>)
 8000184:	f001 fe10 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <readKey+0x4c>)
 800018e:	609a      	str	r2, [r3, #8]
	Key[3] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin); //enter
 8000190:	2101      	movs	r1, #1
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <readKey+0x50>)
 8000194:	f001 fe08 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	4b02      	ldr	r3, [pc, #8]	; (80001a8 <readKey+0x4c>)
 800019e:	60da      	str	r2, [r3, #12]
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800
 80001a8:	20000140 	.word	0x20000140
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <getKeyInput>:
void getKeyInput(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
	readKey();
 80001b6:	f7ff ffd1 	bl	800015c <readKey>
	for(int i = 0; i < MAX_KEY; i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e07d      	b.n	80002bc <getKeyInput+0x10c>
		Keyred0[i] = Keyred1[i];
 80001c0:	4a44      	ldr	r2, [pc, #272]	; (80002d4 <getKeyInput+0x124>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	4943      	ldr	r1, [pc, #268]	; (80002d8 <getKeyInput+0x128>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Keyred1[i] = Keyred2[i];
 80001d0:	4a42      	ldr	r2, [pc, #264]	; (80002dc <getKeyInput+0x12c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	493e      	ldr	r1, [pc, #248]	; (80002d4 <getKeyInput+0x124>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Keyred2[i] = Key[i];
 80001e0:	4a3f      	ldr	r2, [pc, #252]	; (80002e0 <getKeyInput+0x130>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	493c      	ldr	r1, [pc, #240]	; (80002dc <getKeyInput+0x12c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if((Keyred0[i] == Keyred1[i]) && (Keyred1[i] == Keyred2[i])){
 80001f0:	4a39      	ldr	r2, [pc, #228]	; (80002d8 <getKeyInput+0x128>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4936      	ldr	r1, [pc, #216]	; (80002d4 <getKeyInput+0x124>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d14c      	bne.n	800029e <getKeyInput+0xee>
 8000204:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <getKeyInput+0x124>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4933      	ldr	r1, [pc, #204]	; (80002dc <getKeyInput+0x12c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d142      	bne.n	800029e <getKeyInput+0xee>
			if(Keyred3[i] != Keyred2[i]){
 8000218:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <getKeyInput+0x134>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492e      	ldr	r1, [pc, #184]	; (80002dc <getKeyInput+0x12c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d018      	beq.n	800025e <getKeyInput+0xae>
				Keyred3[i] = Keyred2[i];
 800022c:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492b      	ldr	r1, [pc, #172]	; (80002e4 <getKeyInput+0x134>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(Keyred2[i] == PRESS_STATE){
 800023c:	4a27      	ldr	r2, [pc, #156]	; (80002dc <getKeyInput+0x12c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d135      	bne.n	80002b4 <getKeyInput+0x104>
					//TODO
					flag_short[i] = 1;
 8000248:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <getKeyInput+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2101      	movs	r1, #1
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeypress[i] = 200;
 8000252:	4a26      	ldr	r2, [pc, #152]	; (80002ec <getKeyInput+0x13c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	21c8      	movs	r1, #200	; 0xc8
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(Keyred3[i] != Keyred2[i]){
 800025c:	e02a      	b.n	80002b4 <getKeyInput+0x104>
				}
			}else{
				TimerForKeypress[i]--;
 800025e:	4a23      	ldr	r2, [pc, #140]	; (80002ec <getKeyInput+0x13c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	1e5a      	subs	r2, r3, #1
 8000268:	4920      	ldr	r1, [pc, #128]	; (80002ec <getKeyInput+0x13c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeypress[i] == 0){
 8000270:	4a1e      	ldr	r2, [pc, #120]	; (80002ec <getKeyInput+0x13c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11b      	bne.n	80002b4 <getKeyInput+0x104>
					if(Keyred2[i] == PRESS_STATE){
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <getKeyInput+0x12c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d104      	bne.n	8000292 <getKeyInput+0xe2>
						//TODO
						flag_long[i] = 1;
 8000288:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <getKeyInput+0x140>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					TimerForKeypress[i] = 200;
 8000292:	4a16      	ldr	r2, [pc, #88]	; (80002ec <getKeyInput+0x13c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	21c8      	movs	r1, #200	; 0xc8
 8000298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(Keyred3[i] != Keyred2[i]){
 800029c:	e00a      	b.n	80002b4 <getKeyInput+0x104>
				}
			}
		}else{
			flag_long[i] = 0;
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <getKeyInput+0x140>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2100      	movs	r1, #0
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_short[i] = 0;
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <getKeyInput+0x138>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2100      	movs	r1, #0
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002b2:	e000      	b.n	80002b6 <getKeyInput+0x106>
			if(Keyred3[i] != Keyred2[i]){
 80002b4:	bf00      	nop
	for(int i = 0; i < MAX_KEY; i++){
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <getKeyInput+0x144>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f6ff af7c 	blt.w	80001c0 <getKeyInput+0x10>
		}
	}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000050 	.word	0x20000050
 80002d8:	20000000 	.word	0x20000000
 80002dc:	200000a0 	.word	0x200000a0
 80002e0:	20000140 	.word	0x20000140
 80002e4:	200000f0 	.word	0x200000f0
 80002e8:	20000278 	.word	0x20000278
 80002ec:	20000194 	.word	0x20000194
 80002f0:	200002c8 	.word	0x200002c8
 80002f4:	20000190 	.word	0x20000190

080002f8 <isButtonPedes>:

int isButtonPedes(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	if(flag_short[0]){
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <isButtonPedes+0x20>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d004      	beq.n	800030e <isButtonPedes+0x16>
		flag_short[0] = 0;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <isButtonPedes+0x20>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
		return 1;
 800030a:	2301      	movs	r3, #1
 800030c:	e000      	b.n	8000310 <isButtonPedes+0x18>
	}
		return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000278 	.word	0x20000278

0800031c <isButtonMode>:

int isButtonMode(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	if(flag_short[1]){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <isButtonMode+0x20>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d004      	beq.n	8000332 <isButtonMode+0x16>
		flag_short[1] = 0;
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <isButtonMode+0x20>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
		return 1;
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <isButtonMode+0x18>
	}
		return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000278 	.word	0x20000278

08000340 <isModeLongPress>:

int isModeLongPress(){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	if(flag_long[1]){
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <isModeLongPress+0x20>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d004      	beq.n	8000356 <isModeLongPress+0x16>
		flag_long[1] = 0;
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <isModeLongPress+0x20>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isModeLongPress+0x18>
	}
		return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	200002c8 	.word	0x200002c8

08000364 <isButtonTime>:

int isButtonTime(){
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	if(flag_short[2]){
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <isButtonTime+0x20>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <isButtonTime+0x16>
		flag_short[2] = 0;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <isButtonTime+0x20>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
		return 1;
 8000376:	2301      	movs	r3, #1
 8000378:	e000      	b.n	800037c <isButtonTime+0x18>
	}
		return 0;
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000278 	.word	0x20000278

08000388 <isButtonEnter>:

int isButtonEnter(){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	if(flag_short[3]){
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <isButtonEnter+0x20>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d004      	beq.n	800039e <isButtonEnter+0x16>
		flag_short[3] = 0;
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <isButtonEnter+0x20>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
		return 1;
 800039a:	2301      	movs	r3, #1
 800039c:	e000      	b.n	80003a0 <isButtonEnter+0x18>
	}
		return 0;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000278 	.word	0x20000278

080003ac <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003b0:	2100      	movs	r1, #0
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <buzzer_init+0x10>)
 80003b4:	f002 fa48 	bl	8002848 <HAL_TIM_PWM_Start>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000348 	.word	0x20000348

080003c0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <buzzer_SetVolume+0x24>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty_cycle);
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <buzzer_SetVolume+0x24>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <buzzer_SetVolume+0x28>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000318 	.word	0x20000318
 80003e8:	20000348 	.word	0x20000348

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <MX_GPIO_Init+0x110>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <MX_GPIO_Init+0x110>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <MX_GPIO_Init+0x110>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <MX_GPIO_Init+0x110>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a37      	ldr	r2, [pc, #220]	; (80004fc <MX_GPIO_Init+0x110>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <MX_GPIO_Init+0x110>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b32      	ldr	r3, [pc, #200]	; (80004fc <MX_GPIO_Init+0x110>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a31      	ldr	r2, [pc, #196]	; (80004fc <MX_GPIO_Init+0x110>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <MX_GPIO_Init+0x110>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800044e:	482c      	ldr	r0, [pc, #176]	; (8000500 <MX_GPIO_Init+0x114>)
 8000450:	f001 fcc1 	bl	8001dd6 <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	482a      	ldr	r0, [pc, #168]	; (8000504 <MX_GPIO_Init+0x118>)
 800045a:	f001 fcbc 	bl	8001dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D8_Pin|D2_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000464:	4828      	ldr	r0, [pc, #160]	; (8000508 <MX_GPIO_Init+0x11c>)
 8000466:	f001 fcb6 	bl	8001dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800046a:	2313      	movs	r3, #19
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4822      	ldr	r0, [pc, #136]	; (8000508 <MX_GPIO_Init+0x11c>)
 800047e:	f001 fb0f 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000482:	2301      	movs	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	481a      	ldr	r0, [pc, #104]	; (8000500 <MX_GPIO_Init+0x114>)
 8000496:	f001 fb03 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 800049a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800049e:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4813      	ldr	r0, [pc, #76]	; (8000500 <MX_GPIO_Init+0x114>)
 80004b4:	f001 faf4 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D9_Pin;
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_GPIO_Init+0x118>)
 80004d0:	f001 fae6 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin|D2_Pin;
 80004d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_GPIO_Init+0x11c>)
 80004ee:	f001 fad7 	bl	8001aa0 <HAL_GPIO_Init>

}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010c00 	.word	0x40010c00
 8000504:	40011000 	.word	0x40011000
 8000508:	40010800 	.word	0x40010800

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 f8a4 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f824 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f7ff ff68 	bl	80003ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800051c:	f000 f99a 	bl	8000854 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000520:	f000 f9e6 	bl	80008f0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fff8 	bl	8001518 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  buzzer_init();
 8000528:	f7ff ff40 	bl	80003ac <buzzer_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x48>)
 800052e:	f002 f8e1 	bl	80026f4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp_start, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	4908      	ldr	r1, [pc, #32]	; (8000558 <main+0x4c>)
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <main+0x50>)
 8000538:	f003 f8c5 	bl	80036c6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 f861 	bl	8000604 <setTimer1>
  setTimer2(50);
 8000542:	2032      	movs	r0, #50	; 0x32
 8000544:	f000 f872 	bl	800062c <setTimer2>
  setTimer3(30);
 8000548:	201e      	movs	r0, #30
 800054a:	f000 f883 	bl	8000654 <setTimer3>
  while (1)
  {
//	  test_IO();
	  traffic_light();
 800054e:	f000 feff 	bl	8001350 <traffic_light>
  {
 8000552:	e7fc      	b.n	800054e <main+0x42>
 8000554:	20000390 	.word	0x20000390
 8000558:	20000319 	.word	0x20000319
 800055c:	2000043c 	.word	0x2000043c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b090      	sub	sp, #64	; 0x40
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2228      	movs	r2, #40	; 0x28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fe78 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000592:	2300      	movs	r3, #0
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000596:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fc49 	bl	8001e38 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005ac:	f000 f825 	bl	80005fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 feb4 	bl	8002338 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005d6:	f000 f810 	bl	80005fa <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3740      	adds	r7, #64	; 0x40
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	timerRun();
 80005ea:	f000 f847 	bl	800067c <timerRun>
	getKeyInput();
 80005ee:	f7ff fddf 	bl	80001b0 <getKeyInput>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fe:	b672      	cpsid	i
}
 8000600:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000602:	e7fe      	b.n	8000602 <Error_Handler+0x8>

08000604 <setTimer1>:
int timer2_flag=0;

int timer3_counter=0;
int timer3_flag=0;

void setTimer1(int duration){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <setTimer1+0x20>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <setTimer1+0x24>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	2000031c 	.word	0x2000031c
 8000628:	20000320 	.word	0x20000320

0800062c <setTimer2>:

void setTimer2(int duration){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000634:	4a05      	ldr	r2, [pc, #20]	; (800064c <setTimer2+0x20>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <setTimer2+0x24>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000324 	.word	0x20000324
 8000650:	20000328 	.word	0x20000328

08000654 <setTimer3>:

void setTimer3(int duration){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 800065c:	4a05      	ldr	r2, [pc, #20]	; (8000674 <setTimer3+0x20>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <setTimer3+0x24>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000032c 	.word	0x2000032c
 8000678:	20000330 	.word	0x20000330

0800067c <timerRun>:

void timerRun(){
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <timerRun+0x6c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	dd0b      	ble.n	80006a0 <timerRun+0x24>
		timer1_counter--;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <timerRun+0x6c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <timerRun+0x6c>)
 8000690:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <timerRun+0x6c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	dc02      	bgt.n	80006a0 <timerRun+0x24>
			timer1_flag=1;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <timerRun+0x70>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <timerRun+0x74>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dd0b      	ble.n	80006c0 <timerRun+0x44>
		timer2_counter--;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <timerRun+0x74>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <timerRun+0x74>)
 80006b0:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <timerRun+0x74>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dc02      	bgt.n	80006c0 <timerRun+0x44>
			timer2_flag=1;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <timerRun+0x78>)
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <timerRun+0x7c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dd0b      	ble.n	80006e0 <timerRun+0x64>
			timer3_counter--;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <timerRun+0x7c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <timerRun+0x7c>)
 80006d0:	6013      	str	r3, [r2, #0]
			if(timer3_counter<=0){
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <timerRun+0x7c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dc02      	bgt.n	80006e0 <timerRun+0x64>
				timer3_flag=1;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <timerRun+0x80>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
			}
		}
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	2000031c 	.word	0x2000031c
 80006ec:	20000320 	.word	0x20000320
 80006f0:	20000324 	.word	0x20000324
 80006f4:	20000328 	.word	0x20000328
 80006f8:	2000032c 	.word	0x2000032c
 80006fc:	20000330 	.word	0x20000330

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_MspInit+0x5c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x5c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x5c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_MspInit+0x60>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_MspInit+0x60>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 ff9d 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <TIM2_IRQHandler+0x10>)
 80007ba:	f002 f8e7 	bl	800298c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000390 	.word	0x20000390

080007c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART2_IRQHandler+0x10>)
 80007ce:	f002 ff9f 	bl	8003710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000043c 	.word	0x2000043c

080007dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <_sbrk+0x5c>)
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <_sbrk+0x60>)
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <_sbrk+0x64>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <_sbrk+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <_sbrk+0x64>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	429a      	cmp	r2, r3
 800080a:	d207      	bcs.n	800081c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800080c:	f003 fd00 	bl	8004210 <__errno>
 8000810:	4603      	mov	r3, r0
 8000812:	220c      	movs	r2, #12
 8000814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	e009      	b.n	8000830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <_sbrk+0x64>)
 800082c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20005000 	.word	0x20005000
 800083c:	00000400 	.word	0x00000400
 8000840:	20000334 	.word	0x20000334
 8000844:	20000498 	.word	0x20000498

08000848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM2_Init+0x98>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_TIM2_Init+0x98>)
 800087a:	f240 227f 	movw	r2, #639	; 0x27f
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_TIM2_Init+0x98>)
 8000888:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_TIM2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM2_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_TIM2_Init+0x98>)
 800089c:	f001 feda 	bl	8002654 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008a6:	f7ff fea8 	bl	80005fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_TIM2_Init+0x98>)
 80008b8:	f002 fa32 	bl	8002d20 <HAL_TIM_ConfigClockSource>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008c2:	f7ff fe9a 	bl	80005fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_TIM2_Init+0x98>)
 80008d4:	f002 fdb4 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008de:	f7ff fe8c 	bl	80005fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000390 	.word	0x20000390

080008f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000922:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <MX_TIM3_Init+0xe8>)
 8000924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000928:	223f      	movs	r2, #63	; 0x3f
 800092a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_TIM3_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000934:	2263      	movs	r2, #99	; 0x63
 8000936:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_TIM3_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000944:	4823      	ldr	r0, [pc, #140]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000946:	f001 fe85 	bl	8002654 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000950:	f7ff fe53 	bl	80005fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095e:	4619      	mov	r1, r3
 8000960:	481c      	ldr	r0, [pc, #112]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000962:	f002 f9dd 	bl	8002d20 <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800096c:	f7ff fe45 	bl	80005fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000970:	4818      	ldr	r0, [pc, #96]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000972:	f001 ff11 	bl	8002798 <HAL_TIM_PWM_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800097c:	f7ff fe3d 	bl	80005fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_TIM3_Init+0xe4>)
 8000990:	f002 fd56 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800099a:	f7ff fe2e 	bl	80005fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <MX_TIM3_Init+0xe4>)
 80009b6:	f002 f8f1 	bl	8002b9c <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009c0:	f7ff fe1b 	bl	80005fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <MX_TIM3_Init+0xe4>)
 80009c6:	f000 f841 	bl	8000a4c <HAL_TIM_MspPostInit>

}
 80009ca:	bf00      	nop
 80009cc:	3738      	adds	r7, #56	; 0x38
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000348 	.word	0x20000348
 80009d8:	40000400 	.word	0x40000400

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d114      	bne.n	8000a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f000 ff5f 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 ff78 	bl	8001906 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a16:	e010      	b.n	8000a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_TIM_Base_MspInit+0x6c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10b      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_TIM_Base_MspInit+0x68>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40000400 	.word	0x40000400

08000a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_TIM_MspPostInit+0x58>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d117      	bne.n	8000a9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_TIM_MspPostInit+0x5c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_TIM_MspPostInit+0x5c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_TIM_MspPostInit+0x5c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_TIM_MspPostInit+0x60>)
 8000a98:	f001 f802 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40000400 	.word	0x40000400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <Phase1_GreenOn>:
uint8_t flag_color = 0;
uint8_t tog = 0;

uint8_t status_traffic  = AUTOMATIC;

void Phase1_GreenOn(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <Phase1_GreenOn+0x28>)
 8000abc:	f001 f98b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <Phase1_GreenOn+0x2c>)
 8000ac6:	f001 f986 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <Phase1_GreenOn+0x2c>)
 8000ad0:	f001 f981 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <Phase1_RedOn>:
void Phase1_RedOn(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <Phase1_RedOn+0x28>)
 8000aec:	f001 f973 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2108      	movs	r1, #8
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <Phase1_RedOn+0x2c>)
 8000af6:	f001 f96e 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2120      	movs	r1, #32
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <Phase1_RedOn+0x2c>)
 8000b00:	f001 f969 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <Phase1_YellowOn>:
void Phase1_YellowOn(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <Phase1_YellowOn+0x28>)
 8000b1c:	f001 f95b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2108      	movs	r1, #8
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <Phase1_YellowOn+0x2c>)
 8000b26:	f001 f956 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <Phase1_YellowOn+0x2c>)
 8000b30:	f001 f951 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <Phase2_GreenOn>:

void Phase2_GreenOn(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <Phase2_GreenOn+0x2c>)
 8000b4a:	f001 f944 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <Phase2_GreenOn+0x2c>)
 8000b56:	f001 f93e 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <Phase2_GreenOn+0x30>)
 8000b62:	f001 f938 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010800 	.word	0x40010800

08000b74 <Phase2_RedOn>:
void Phase2_RedOn(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <Phase2_RedOn+0x2c>)
 8000b7e:	f001 f92a 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <Phase2_RedOn+0x2c>)
 8000b8a:	f001 f924 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <Phase2_RedOn+0x30>)
 8000b96:	f001 f91e 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <Phase2_YellowOn>:
void Phase2_YellowOn(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <Phase2_YellowOn+0x2c>)
 8000bb2:	f001 f910 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <Phase2_YellowOn+0x2c>)
 8000bbe:	f001 f90a 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <Phase2_YellowOn+0x30>)
 8000bca:	f001 f904 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40010800 	.word	0x40010800

08000bdc <Pedes_GreenOn>:

void Pedes_GreenOn(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <Pedes_GreenOn+0x28>)
 8000be8:	f001 f8f5 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <Pedes_GreenOn+0x2c>)
 8000bf2:	f001 f8f0 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <Pedes_GreenOn+0x30>)
 8000bfc:	f001 f8eb 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <Pedes_RedOn>:
void Pedes_RedOn(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <Pedes_RedOn+0x28>)
 8000c1c:	f001 f8db 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <Pedes_RedOn+0x2c>)
 8000c26:	f001 f8d6 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <Pedes_RedOn+0x30>)
 8000c30:	f001 f8d1 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <Pedes_YellowOn>:
void Pedes_YellowOn(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <Pedes_YellowOn+0x28>)
 8000c50:	f001 f8c1 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <Pedes_YellowOn+0x2c>)
 8000c5a:	f001 f8bc 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <Pedes_YellowOn+0x30>)
 8000c64:	f001 f8b7 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40011000 	.word	0x40011000
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <Pedes_Off>:

void Pedes_Off(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <Pedes_Off+0x28>)
 8000c84:	f001 f8a7 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <Pedes_Off+0x2c>)
 8000c8e:	f001 f8a2 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <Pedes_Off+0x30>)
 8000c98:	f001 f89d 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <Blink_Green>:
void Blink_Green(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <Blink_Green+0x48>)
 8000cb8:	f001 f88d 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <Blink_Green+0x4c>)
 8000cc2:	f001 f888 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <Blink_Green+0x4c>)
 8000cca:	f001 f89c 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <Blink_Green+0x4c>)
 8000cd4:	f001 f87f 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <Blink_Green+0x4c>)
 8000ce0:	f001 f879 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <Blink_Green+0x48>)
 8000cea:	f001 f88c 	bl	8001e06 <HAL_GPIO_TogglePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <Blink_Red>:
void Blink_Red(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <Blink_Red+0x48>)
 8000d06:	f001 f87e 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <Blink_Red+0x4c>)
 8000d10:	f001 f861 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <Blink_Red+0x4c>)
 8000d1a:	f001 f85c 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <Blink_Red+0x4c>)
 8000d22:	f001 f870 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <Blink_Red+0x4c>)
 8000d2e:	f001 f852 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <Blink_Red+0x48>)
 8000d3a:	f001 f84c 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <Blink_Yellow>:
void Blink_Yellow(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <Blink_Yellow+0x48>)
 8000d58:	f001 f83d 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <Blink_Yellow+0x4c>)
 8000d60:	f001 f851 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <Blink_Yellow+0x4c>)
 8000d6a:	f001 f834 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <Blink_Yellow+0x4c>)
 8000d74:	f001 f82f 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <Blink_Yellow+0x4c>)
 8000d7e:	f001 f842 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <Blink_Yellow+0x48>)
 8000d8a:	f001 f824 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800
 8000d98:	40010c00 	.word	0x40010c00

08000d9c <normal_trafic>:


void normal_trafic(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	switch (status_automation){
 8000da0:	4b84      	ldr	r3, [pc, #528]	; (8000fb4 <normal_trafic+0x218>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3b64      	subs	r3, #100	; 0x64
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	f200 80f3 	bhi.w	8000f92 <normal_trafic+0x1f6>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <normal_trafic+0x18>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000dc9 	.word	0x08000dc9
 8000db8:	08000de9 	.word	0x08000de9
 8000dbc:	08000e57 	.word	0x08000e57
 8000dc0:	08000ec1 	.word	0x08000ec1
 8000dc4:	08000f29 	.word	0x08000f29
	case INIT:
		counter_normal = count_green;
 8000dc8:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <normal_trafic+0x21c>)
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <normal_trafic+0x220>)
 8000dce:	701a      	strb	r2, [r3, #0]
		num1 = count_red;
 8000dd0:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <normal_trafic+0x224>)
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <normal_trafic+0x228>)
 8000dd6:	701a      	strb	r2, [r3, #0]
		num2 = count_green;
 8000dd8:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <normal_trafic+0x21c>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <normal_trafic+0x22c>)
 8000dde:	701a      	strb	r2, [r3, #0]
		status_automation = PHASE_2_GREEN;
 8000de0:	4b74      	ldr	r3, [pc, #464]	; (8000fb4 <normal_trafic+0x218>)
 8000de2:	2265      	movs	r2, #101	; 0x65
 8000de4:	701a      	strb	r2, [r3, #0]
		break;
 8000de6:	e0d8      	b.n	8000f9a <normal_trafic+0x1fe>
	case PHASE_2_GREEN:
		counter_normal--;
 8000de8:	4b74      	ldr	r3, [pc, #464]	; (8000fbc <normal_trafic+0x220>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <normal_trafic+0x220>)
 8000df2:	701a      	strb	r2, [r3, #0]
		Phase2_GreenOn();
 8000df4:	f7ff fea4 	bl	8000b40 <Phase2_GreenOn>
		Phase1_RedOn();
 8000df8:	f7ff fe72 	bl	8000ae0 <Phase1_RedOn>
		flag_color = TUNING_GREEN;
 8000dfc:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <normal_trafic+0x230>)
 8000dfe:	220b      	movs	r2, #11
 8000e00:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0){
 8000e02:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <normal_trafic+0x220>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d118      	bne.n	8000e3c <normal_trafic+0xa0>
			counter_normal = count_yellow;
 8000e0a:	4b71      	ldr	r3, [pc, #452]	; (8000fd0 <normal_trafic+0x234>)
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <normal_trafic+0x220>)
 8000e10:	701a      	strb	r2, [r3, #0]
			num1--;
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <normal_trafic+0x228>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <normal_trafic+0x228>)
 8000e1c:	701a      	strb	r2, [r3, #0]
			num2 = count_yellow;
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <normal_trafic+0x234>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b69      	ldr	r3, [pc, #420]	; (8000fc8 <normal_trafic+0x22c>)
 8000e24:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_2_YELLOW;
 8000e26:	4b63      	ldr	r3, [pc, #396]	; (8000fb4 <normal_trafic+0x218>)
 8000e28:	2266      	movs	r2, #102	; 0x66
 8000e2a:	701a      	strb	r2, [r3, #0]
			Phase2_YellowOn();
 8000e2c:	f7ff febc 	bl	8000ba8 <Phase2_YellowOn>
			Phase1_RedOn();
 8000e30:	f7ff fe56 	bl	8000ae0 <Phase1_RedOn>
			flag_color = TUNING_YELLOW;
 8000e34:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <normal_trafic+0x230>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
		break;
 8000e3a:	e0ae      	b.n	8000f9a <normal_trafic+0x1fe>
			num1--;
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <normal_trafic+0x228>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <normal_trafic+0x228>)
 8000e46:	701a      	strb	r2, [r3, #0]
			num2--;
 8000e48:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <normal_trafic+0x22c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <normal_trafic+0x22c>)
 8000e52:	701a      	strb	r2, [r3, #0]
		break;
 8000e54:	e0a1      	b.n	8000f9a <normal_trafic+0x1fe>
	case PHASE_2_YELLOW:
		counter_normal--;
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <normal_trafic+0x220>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <normal_trafic+0x220>)
 8000e60:	701a      	strb	r2, [r3, #0]
		Phase2_YellowOn();
 8000e62:	f7ff fea1 	bl	8000ba8 <Phase2_YellowOn>
		Phase1_RedOn();
 8000e66:	f7ff fe3b 	bl	8000ae0 <Phase1_RedOn>
		flag_color = TUNING_YELLOW;
 8000e6a:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <normal_trafic+0x230>)
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000e70:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <normal_trafic+0x220>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d116      	bne.n	8000ea6 <normal_trafic+0x10a>
			counter_normal = count_green;
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <normal_trafic+0x21c>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <normal_trafic+0x220>)
 8000e7e:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_1_GREEN;
 8000e80:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <normal_trafic+0x218>)
 8000e82:	2267      	movs	r2, #103	; 0x67
 8000e84:	701a      	strb	r2, [r3, #0]
			num1 = count_green;
 8000e86:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <normal_trafic+0x21c>)
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <normal_trafic+0x228>)
 8000e8c:	701a      	strb	r2, [r3, #0]
			num2 = count_red;
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <normal_trafic+0x224>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <normal_trafic+0x22c>)
 8000e94:	701a      	strb	r2, [r3, #0]
			Phase1_GreenOn();
 8000e96:	f7ff fe0b 	bl	8000ab0 <Phase1_GreenOn>
			Phase2_RedOn();
 8000e9a:	f7ff fe6b 	bl	8000b74 <Phase2_RedOn>
			flag_color = TUNING_RED;
 8000e9e:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <normal_trafic+0x230>)
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000ea4:	e079      	b.n	8000f9a <normal_trafic+0x1fe>
			num1--;
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <normal_trafic+0x228>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <normal_trafic+0x228>)
 8000eb0:	701a      	strb	r2, [r3, #0]
			num2--;
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <normal_trafic+0x22c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <normal_trafic+0x22c>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	break;
 8000ebe:	e06c      	b.n	8000f9a <normal_trafic+0x1fe>
	case PHASE_1_GREEN:
		counter_normal--;
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <normal_trafic+0x220>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <normal_trafic+0x220>)
 8000eca:	701a      	strb	r2, [r3, #0]
		Phase1_GreenOn();
 8000ecc:	f7ff fdf0 	bl	8000ab0 <Phase1_GreenOn>
		Phase2_RedOn();
 8000ed0:	f7ff fe50 	bl	8000b74 <Phase2_RedOn>
		flag_color = TUNING_RED;
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <normal_trafic+0x230>)
 8000ed6:	220a      	movs	r2, #10
 8000ed8:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <normal_trafic+0x220>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d115      	bne.n	8000f0e <normal_trafic+0x172>
			counter_normal = count_yellow;
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <normal_trafic+0x234>)
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <normal_trafic+0x220>)
 8000ee8:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_1_YELLOW;
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <normal_trafic+0x218>)
 8000eec:	2268      	movs	r2, #104	; 0x68
 8000eee:	701a      	strb	r2, [r3, #0]
			num1 = count_yellow;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <normal_trafic+0x234>)
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <normal_trafic+0x228>)
 8000ef6:	701a      	strb	r2, [r3, #0]
			num2--;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <normal_trafic+0x22c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <normal_trafic+0x22c>)
 8000f02:	701a      	strb	r2, [r3, #0]
			Phase1_YellowOn();
 8000f04:	f7ff fe04 	bl	8000b10 <Phase1_YellowOn>
			Phase2_RedOn();
 8000f08:	f7ff fe34 	bl	8000b74 <Phase2_RedOn>
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000f0c:	e045      	b.n	8000f9a <normal_trafic+0x1fe>
			num1--;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <normal_trafic+0x228>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <normal_trafic+0x228>)
 8000f18:	701a      	strb	r2, [r3, #0]
			num2--;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <normal_trafic+0x22c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <normal_trafic+0x22c>)
 8000f24:	701a      	strb	r2, [r3, #0]
	break;
 8000f26:	e038      	b.n	8000f9a <normal_trafic+0x1fe>
	case PHASE_1_YELLOW:
		counter_normal--;
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <normal_trafic+0x220>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <normal_trafic+0x220>)
 8000f32:	701a      	strb	r2, [r3, #0]
		Phase1_YellowOn();
 8000f34:	f7ff fdec 	bl	8000b10 <Phase1_YellowOn>
		Phase2_RedOn();
 8000f38:	f7ff fe1c 	bl	8000b74 <Phase2_RedOn>
		flag_color = TUNING_RED;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <normal_trafic+0x230>)
 8000f3e:	220a      	movs	r2, #10
 8000f40:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <normal_trafic+0x220>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d116      	bne.n	8000f78 <normal_trafic+0x1dc>
			counter_normal = count_green;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <normal_trafic+0x21c>)
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <normal_trafic+0x220>)
 8000f50:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_2_GREEN;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <normal_trafic+0x218>)
 8000f54:	2265      	movs	r2, #101	; 0x65
 8000f56:	701a      	strb	r2, [r3, #0]
			num1 = count_red;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <normal_trafic+0x224>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <normal_trafic+0x228>)
 8000f5e:	701a      	strb	r2, [r3, #0]
			num2 = count_green;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <normal_trafic+0x21c>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <normal_trafic+0x22c>)
 8000f66:	701a      	strb	r2, [r3, #0]
			Phase2_GreenOn();
 8000f68:	f7ff fdea 	bl	8000b40 <Phase2_GreenOn>
			Phase1_RedOn();
 8000f6c:	f7ff fdb8 	bl	8000ae0 <Phase1_RedOn>
			flag_color = TUNING_GREEN;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <normal_trafic+0x230>)
 8000f72:	220b      	movs	r2, #11
 8000f74:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000f76:	e010      	b.n	8000f9a <normal_trafic+0x1fe>
			num1--;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <normal_trafic+0x228>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <normal_trafic+0x228>)
 8000f82:	701a      	strb	r2, [r3, #0]
			num2--;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <normal_trafic+0x22c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <normal_trafic+0x22c>)
 8000f8e:	701a      	strb	r2, [r3, #0]
	break;
 8000f90:	e003      	b.n	8000f9a <normal_trafic+0x1fe>
	default:
		status_automation = INIT;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <normal_trafic+0x218>)
 8000f94:	2264      	movs	r2, #100	; 0x64
 8000f96:	701a      	strb	r2, [r3, #0]
		break;
 8000f98:	bf00      	nop
	}
	if(flag_tuning){
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <normal_trafic+0x238>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <normal_trafic+0x212>
		count_tuning--;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <normal_trafic+0x23c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <normal_trafic+0x23c>)
 8000fac:	701a      	strb	r2, [r3, #0]
	}
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001e8 	.word	0x200001e8
 8000fb8:	200001eb 	.word	0x200001eb
 8000fbc:	20000338 	.word	0x20000338
 8000fc0:	200001e9 	.word	0x200001e9
 8000fc4:	20000339 	.word	0x20000339
 8000fc8:	2000033a 	.word	0x2000033a
 8000fcc:	2000033d 	.word	0x2000033d
 8000fd0:	200001ea 	.word	0x200001ea
 8000fd4:	2000033c 	.word	0x2000033c
 8000fd8:	200001ed 	.word	0x200001ed

08000fdc <manual_trafic>:

void manual_trafic(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	switch (status_manual){
 8000fe0:	4b8d      	ldr	r3, [pc, #564]	; (8001218 <manual_trafic+0x23c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	f200 810b 	bhi.w	8001202 <manual_trafic+0x226>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <manual_trafic+0x18>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	08001013 	.word	0x08001013
 8000ffc:	080010b9 	.word	0x080010b9
 8001000:	0800115f 	.word	0x0800115f
	case MANUAL_INIT:
		status_manual = MANUAL_RED;
 8001004:	4b84      	ldr	r3, [pc, #528]	; (8001218 <manual_trafic+0x23c>)
 8001006:	2202      	movs	r2, #2
 8001008:	701a      	strb	r2, [r3, #0]
		count_buffer = count_red;
 800100a:	4b84      	ldr	r3, [pc, #528]	; (800121c <manual_trafic+0x240>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b84      	ldr	r3, [pc, #528]	; (8001220 <manual_trafic+0x244>)
 8001010:	701a      	strb	r2, [r3, #0]
	case MANUAL_RED:
		if(timer2_flag){
 8001012:	4b84      	ldr	r3, [pc, #528]	; (8001224 <manual_trafic+0x248>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <manual_trafic+0x48>
			setTimer2(50);
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f7ff fb06 	bl	800062c <setTimer2>
			Blink_Red();
 8001020:	f7ff fe6c 	bl	8000cfc <Blink_Red>
		}
		if(isButtonMode()){
 8001024:	f7ff f97a 	bl	800031c <isButtonMode>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <manual_trafic+0x60>
			status_manual = MANUAL_YELLOW;
 800102e:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <manual_trafic+0x23c>)
 8001030:	2203      	movs	r2, #3
 8001032:	701a      	strb	r2, [r3, #0]
			count_buffer = count_yellow;
 8001034:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <manual_trafic+0x24c>)
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4b79      	ldr	r3, [pc, #484]	; (8001220 <manual_trafic+0x244>)
 800103a:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 800103c:	f7ff f992 	bl	8000364 <isButtonTime>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <manual_trafic+0x76>
			count_buffer++;
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <manual_trafic+0x244>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <manual_trafic+0x244>)
 8001050:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 8001052:	f7ff f999 	bl	8000388 <isButtonEnter>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80d6 	beq.w	800120a <manual_trafic+0x22e>
			count_red = count_buffer;
 800105e:	4b70      	ldr	r3, [pc, #448]	; (8001220 <manual_trafic+0x244>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	4b6e      	ldr	r3, [pc, #440]	; (800121c <manual_trafic+0x240>)
 8001064:	701a      	strb	r2, [r3, #0]
			sendString("!Save count red#");
 8001066:	4871      	ldr	r0, [pc, #452]	; (800122c <manual_trafic+0x250>)
 8001068:	f000 f9de 	bl	8001428 <sendString>
			if(count_red < count_green)
 800106c:	4b6b      	ldr	r3, [pc, #428]	; (800121c <manual_trafic+0x240>)
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	4b6f      	ldr	r3, [pc, #444]	; (8001230 <manual_trafic+0x254>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d208      	bcs.n	800108a <manual_trafic+0xae>
				count_yellow = count_green - count_red;
 8001078:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <manual_trafic+0x254>)
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b67      	ldr	r3, [pc, #412]	; (800121c <manual_trafic+0x240>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <manual_trafic+0x24c>)
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e007      	b.n	800109a <manual_trafic+0xbe>
			else{
				count_green = count_red - count_yellow;
 800108a:	4b64      	ldr	r3, [pc, #400]	; (800121c <manual_trafic+0x240>)
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	4b66      	ldr	r3, [pc, #408]	; (8001228 <manual_trafic+0x24c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b66      	ldr	r3, [pc, #408]	; (8001230 <manual_trafic+0x254>)
 8001098:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <manual_trafic+0x254>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <manual_trafic+0x240>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a60      	ldr	r2, [pc, #384]	; (8001228 <manual_trafic+0x24c>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <manual_trafic+0x258>)
 80010b4:	701a      	strb	r2, [r3, #0]
		}

		break;
 80010b6:	e0a8      	b.n	800120a <manual_trafic+0x22e>
	case MANUAL_YELLOW:
		if(timer2_flag){
 80010b8:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <manual_trafic+0x248>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <manual_trafic+0xee>
			setTimer2(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f7ff fab3 	bl	800062c <setTimer2>
			Blink_Yellow();
 80010c6:	f7ff fe41 	bl	8000d4c <Blink_Yellow>
		}
		if(isButtonMode()){
 80010ca:	f7ff f927 	bl	800031c <isButtonMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <manual_trafic+0x106>
			status_manual = MANUAL_GREEN;
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <manual_trafic+0x23c>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
			count_buffer = count_green;
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <manual_trafic+0x254>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <manual_trafic+0x244>)
 80010e0:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 80010e2:	f7ff f93f 	bl	8000364 <isButtonTime>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <manual_trafic+0x11c>
			count_buffer++;
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <manual_trafic+0x244>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <manual_trafic+0x244>)
 80010f6:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 80010f8:	f7ff f946 	bl	8000388 <isButtonEnter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8085 	beq.w	800120e <manual_trafic+0x232>
			count_yellow = count_buffer;
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <manual_trafic+0x244>)
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	4b47      	ldr	r3, [pc, #284]	; (8001228 <manual_trafic+0x24c>)
 800110a:	701a      	strb	r2, [r3, #0]
			sendString("!Save count yellow#");
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <manual_trafic+0x25c>)
 800110e:	f000 f98b 	bl	8001428 <sendString>
			if(count_red < count_green)
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <manual_trafic+0x240>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <manual_trafic+0x254>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d208      	bcs.n	8001130 <manual_trafic+0x154>
				count_red = count_green - count_yellow;
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <manual_trafic+0x254>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <manual_trafic+0x24c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <manual_trafic+0x240>)
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e007      	b.n	8001140 <manual_trafic+0x164>
			else{
				count_green = count_red - count_yellow;
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <manual_trafic+0x240>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <manual_trafic+0x24c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <manual_trafic+0x254>)
 800113e:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <manual_trafic+0x254>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <manual_trafic+0x240>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a36      	ldr	r2, [pc, #216]	; (8001228 <manual_trafic+0x24c>)
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	4413      	add	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <manual_trafic+0x258>)
 800115a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800115c:	e057      	b.n	800120e <manual_trafic+0x232>
	case MANUAL_GREEN:
		if(timer2_flag){
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <manual_trafic+0x248>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <manual_trafic+0x194>
			setTimer2(50);
 8001166:	2032      	movs	r0, #50	; 0x32
 8001168:	f7ff fa60 	bl	800062c <setTimer2>
			Blink_Green();
 800116c:	f7ff fd9e 	bl	8000cac <Blink_Green>
		}
		if(isButtonMode()){
 8001170:	f7ff f8d4 	bl	800031c <isButtonMode>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <manual_trafic+0x1ac>
			status_manual = MANUAL_RED;
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <manual_trafic+0x23c>)
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
			count_buffer = count_red;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <manual_trafic+0x240>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <manual_trafic+0x244>)
 8001186:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 8001188:	f7ff f8ec 	bl	8000364 <isButtonTime>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <manual_trafic+0x1c2>
			count_buffer++;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <manual_trafic+0x244>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <manual_trafic+0x244>)
 800119c:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 800119e:	f7ff f8f3 	bl	8000388 <isButtonEnter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d034      	beq.n	8001212 <manual_trafic+0x236>
			count_green = count_buffer;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <manual_trafic+0x244>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <manual_trafic+0x254>)
 80011ae:	701a      	strb	r2, [r3, #0]
			sendString("!Save count green#");
 80011b0:	4822      	ldr	r0, [pc, #136]	; (800123c <manual_trafic+0x260>)
 80011b2:	f000 f939 	bl	8001428 <sendString>
			if(count_red < count_green)
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <manual_trafic+0x240>)
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <manual_trafic+0x254>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d208      	bcs.n	80011d4 <manual_trafic+0x1f8>
				count_red = count_green - count_yellow;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <manual_trafic+0x254>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <manual_trafic+0x24c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <manual_trafic+0x240>)
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e007      	b.n	80011e4 <manual_trafic+0x208>
			else{
				count_yellow = count_red - count_green;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <manual_trafic+0x240>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <manual_trafic+0x254>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <manual_trafic+0x24c>)
 80011e2:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <manual_trafic+0x254>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <manual_trafic+0x240>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <manual_trafic+0x24c>)
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <manual_trafic+0x258>)
 80011fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001200:	e007      	b.n	8001212 <manual_trafic+0x236>
	default:
		status_manual = MANUAL_INIT;
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <manual_trafic+0x23c>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
	}
}
 8001208:	e004      	b.n	8001214 <manual_trafic+0x238>
		break;
 800120a:	bf00      	nop
 800120c:	e002      	b.n	8001214 <manual_trafic+0x238>
		break;
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <manual_trafic+0x238>
		break;
 8001212:	bf00      	nop
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001ec 	.word	0x200001ec
 800121c:	200001e9 	.word	0x200001e9
 8001220:	2000033b 	.word	0x2000033b
 8001224:	20000328 	.word	0x20000328
 8001228:	200001ea 	.word	0x200001ea
 800122c:	08004b00 	.word	0x08004b00
 8001230:	200001eb 	.word	0x200001eb
 8001234:	200001ed 	.word	0x200001ed
 8001238:	08004b14 	.word	0x08004b14
 800123c:	08004b28 	.word	0x08004b28

08001240 <tuning_traffic>:

void tuning_traffic(){ //person walking on phase1
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	if(isButtonPedes()){
 8001244:	f7ff f858 	bl	80002f8 <isButtonPedes>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d010      	beq.n	8001270 <tuning_traffic+0x30>
		flag_tuning = 1;
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <tuning_traffic+0xec>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
		count_tuning = 2*(count_green + count_red + count_yellow);
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <tuning_traffic+0xf0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b36      	ldr	r3, [pc, #216]	; (8001334 <tuning_traffic+0xf4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a35      	ldr	r2, [pc, #212]	; (8001338 <tuning_traffic+0xf8>)
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b2db      	uxtb	r3, r3
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <tuning_traffic+0xfc>)
 800126e:	701a      	strb	r2, [r3, #0]
	}
	if(count_tuning <= 0){
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <tuning_traffic+0xfc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d115      	bne.n	80012a4 <tuning_traffic+0x64>
		flag_tuning = 0;
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <tuning_traffic+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
		Pedes_Off();
 800127e:	f7ff fcfb 	bl	8000c78 <Pedes_Off>
		buzzer_SetVolume(0);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f89c 	bl	80003c0 <buzzer_SetVolume>
		count_tuning = 2*(count_green + count_red + count_yellow);
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <tuning_traffic+0xf0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <tuning_traffic+0xf4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a28      	ldr	r2, [pc, #160]	; (8001338 <tuning_traffic+0xf8>)
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <tuning_traffic+0xfc>)
 80012a2:	701a      	strb	r2, [r3, #0]
	}
	if(flag_tuning){
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <tuning_traffic+0xec>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d03a      	beq.n	8001322 <tuning_traffic+0xe2>
		switch(flag_color){
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <tuning_traffic+0x100>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d030      	beq.n	8001316 <tuning_traffic+0xd6>
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	dc37      	bgt.n	8001328 <tuning_traffic+0xe8>
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	d026      	beq.n	800130a <tuning_traffic+0xca>
 80012bc:	2b0b      	cmp	r3, #11
 80012be:	d133      	bne.n	8001328 <tuning_traffic+0xe8>
			case TUNING_GREEN:
				Pedes_GreenOn();
 80012c0:	f7ff fc8c 	bl	8000bdc <Pedes_GreenOn>
				if(counter_normal <= 3){
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <tuning_traffic+0x104>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d82c      	bhi.n	8001326 <tuning_traffic+0xe6>
					if(timer3_flag){
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <tuning_traffic+0x108>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d028      	beq.n	8001326 <tuning_traffic+0xe6>
						setTimer1(10*counter_normal);
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <tuning_traffic+0x104>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f98e 	bl	8000604 <setTimer1>
						tog = 1 - tog;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <tuning_traffic+0x10c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f1c3 0301 	rsb	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <tuning_traffic+0x10c>)
 80012f4:	701a      	strb	r2, [r3, #0]
						buzzer_SetVolume(50*tog);
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <tuning_traffic+0x10c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	2332      	movs	r3, #50	; 0x32
 80012fe:	fb03 f302 	mul.w	r3, r3, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f85c 	bl	80003c0 <buzzer_SetVolume>
					}
				}
				break;
 8001308:	e00d      	b.n	8001326 <tuning_traffic+0xe6>
			case TUNING_RED:
				Pedes_RedOn();
 800130a:	f7ff fc81 	bl	8000c10 <Pedes_RedOn>
				buzzer_SetVolume(0);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff f856 	bl	80003c0 <buzzer_SetVolume>
				break;
 8001314:	e008      	b.n	8001328 <tuning_traffic+0xe8>
			case TUNING_YELLOW:
				Pedes_YellowOn();
 8001316:	f7ff fc95 	bl	8000c44 <Pedes_YellowOn>
				buzzer_SetVolume(0);
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff f850 	bl	80003c0 <buzzer_SetVolume>
				break;
 8001320:	e002      	b.n	8001328 <tuning_traffic+0xe8>
		}
	}
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <tuning_traffic+0xe8>
				break;
 8001326:	bf00      	nop
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000033c 	.word	0x2000033c
 8001330:	200001eb 	.word	0x200001eb
 8001334:	200001e9 	.word	0x200001e9
 8001338:	200001ea 	.word	0x200001ea
 800133c:	200001ed 	.word	0x200001ed
 8001340:	2000033d 	.word	0x2000033d
 8001344:	20000338 	.word	0x20000338
 8001348:	20000330 	.word	0x20000330
 800134c:	2000033e 	.word	0x2000033e

08001350 <traffic_light>:

void traffic_light(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	switch(status_traffic){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <traffic_light+0x88>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d002      	beq.n	8001362 <traffic_light+0x12>
 800135c:	2b10      	cmp	r3, #16
 800135e:	d01d      	beq.n	800139c <traffic_light+0x4c>
 8001360:	e033      	b.n	80013ca <traffic_light+0x7a>
	case AUTOMATIC:
		if(timer1_flag){
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <traffic_light+0x8c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00d      	beq.n	8001386 <traffic_light+0x36>
			setTimer1(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f7ff f94a 	bl	8000604 <setTimer1>
			normal_trafic();
 8001370:	f7ff fd14 	bl	8000d9c <normal_trafic>
			send7seg(num1, num2);
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <traffic_light+0x90>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <traffic_light+0x94>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f000 f88d 	bl	80014a0 <send7seg>
		}
		if(isModeLongPress()){
 8001386:	f7fe ffdb 	bl	8000340 <isModeLongPress>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <traffic_light+0x46>
			status_traffic = MANUAL;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <traffic_light+0x88>)
 8001392:	2210      	movs	r2, #16
 8001394:	701a      	strb	r2, [r3, #0]
		}
		tuning_traffic();
 8001396:	f7ff ff53 	bl	8001240 <tuning_traffic>
		//send uart 2 phase counter
		break;
 800139a:	e01b      	b.n	80013d4 <traffic_light+0x84>
	case MANUAL:
		manual_trafic();
 800139c:	f7ff fe1e 	bl	8000fdc <manual_trafic>
		if(timer1_flag){
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <traffic_light+0x8c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <traffic_light+0x68>
			setTimer1(100);
 80013a8:	2064      	movs	r0, #100	; 0x64
 80013aa:	f7ff f92b 	bl	8000604 <setTimer1>
			sendManual(count_buffer);
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <traffic_light+0x98>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f898 	bl	80014e8 <sendManual>
		}
		if(isModeLongPress()){
 80013b8:	f7fe ffc2 	bl	8000340 <isModeLongPress>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <traffic_light+0x82>
			status_traffic = AUTOMATIC;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <traffic_light+0x88>)
 80013c4:	220f      	movs	r2, #15
 80013c6:	701a      	strb	r2, [r3, #0]
		}
		//send temp or ?????
		break;
 80013c8:	e003      	b.n	80013d2 <traffic_light+0x82>
	default:
		status_traffic = AUTOMATIC;
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <traffic_light+0x88>)
 80013cc:	220f      	movs	r2, #15
 80013ce:	701a      	strb	r2, [r3, #0]
	}
}
 80013d0:	e000      	b.n	80013d4 <traffic_light+0x84>
		break;
 80013d2:	bf00      	nop
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200001ee 	.word	0x200001ee
 80013dc:	20000320 	.word	0x20000320
 80013e0:	20000339 	.word	0x20000339
 80013e4:	2000033a 	.word	0x2000033a
 80013e8:	2000033b 	.word	0x2000033b

080013ec <HAL_UART_RxCpltCallback>:
//UART_HandleTypeDef huart2;

unsigned char temp = 0;
uint8_t msg[100];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_UART_RxCpltCallback+0x30>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10a      	bne.n	8001414 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 200);
 80013fe:	23c8      	movs	r3, #200	; 0xc8
 8001400:	2201      	movs	r2, #1
 8001402:	4907      	ldr	r1, [pc, #28]	; (8001420 <HAL_UART_RxCpltCallback+0x34>)
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <HAL_UART_RxCpltCallback+0x38>)
 8001406:	f002 f8db 	bl	80035c0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <HAL_UART_RxCpltCallback+0x34>)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_UART_RxCpltCallback+0x38>)
 8001410:	f002 f959 	bl	80036c6 <HAL_UART_Receive_IT>
	}
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40004400 	.word	0x40004400
 8001420:	2000033f 	.word	0x2000033f
 8001424:	2000043c 	.word	0x2000043c

08001428 <sendString>:

void sendString(uint8_t* str){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4907      	ldr	r1, [pc, #28]	; (8001450 <sendString+0x28>)
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <sendString+0x2c>)
 8001436:	f002 ff1d 	bl	8004274 <siprintf>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	230a      	movs	r3, #10
 8001440:	4904      	ldr	r1, [pc, #16]	; (8001454 <sendString+0x2c>)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <sendString+0x30>)
 8001444:	f002 f8bc 	bl	80035c0 <HAL_UART_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08004b3c 	.word	0x08004b3c
 8001454:	200003d8 	.word	0x200003d8
 8001458:	2000043c 	.word	0x2000043c

0800145c <sendNum>:

void sendNum(uint8_t num) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    char number[3];
    sprintf(number, "%.2d", num);
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	490a      	ldr	r1, [pc, #40]	; (8001498 <sendNum+0x3c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f002 ff00 	bl	8004274 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 10);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe67 	bl	800014c <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 010c 	add.w	r1, r7, #12
 8001486:	230a      	movs	r3, #10
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <sendNum+0x40>)
 800148a:	f002 f899 	bl	80035c0 <HAL_UART_Transmit>
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08004b40 	.word	0x08004b40
 800149c:	2000043c 	.word	0x2000043c

080014a0 <send7seg>:

void send7seg(uint8_t phase1, uint8_t phase2){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
	sendString("!Phase 1: ");
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <send7seg+0x3c>)
 80014b2:	f7ff ffb9 	bl	8001428 <sendString>
	sendNum(phase1);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ffcf 	bl	800145c <sendNum>
	sendString("; Phase 2: ");
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <send7seg+0x40>)
 80014c0:	f7ff ffb2 	bl	8001428 <sendString>
	sendNum(phase2);
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ffc8 	bl	800145c <sendNum>
	sendString("#\r\n");
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <send7seg+0x44>)
 80014ce:	f7ff ffab 	bl	8001428 <sendString>
//	HAL_UART_Transmit(&huart2, (uint8_t*) "#\r\n", 3, 100);
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08004b48 	.word	0x08004b48
 80014e0:	08004b54 	.word	0x08004b54
 80014e4:	08004b60 	.word	0x08004b60

080014e8 <sendManual>:

void sendManual(uint8_t temp){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	sendString("!Temporary value: ");
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <sendManual+0x28>)
 80014f4:	f7ff ff98 	bl	8001428 <sendString>
	sendNum(temp);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ffae 	bl	800145c <sendNum>
	sendString("#\r\n");
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <sendManual+0x2c>)
 8001502:	f7ff ff91 	bl	8001428 <sendString>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	08004b64 	.word	0x08004b64
 8001514:	08004b60 	.word	0x08004b60

08001518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f001 ffe6 	bl	8003520 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f7ff f84e 	bl	80005fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000043c 	.word	0x2000043c
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_UART_MspInit+0x98>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d137      	bne.n	80015fc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_UART_MspInit+0x9c>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_UART_MspInit+0x9c>)
 8001592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001596:	61d3      	str	r3, [r2, #28]
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_UART_MspInit+0x9c>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015bc:	2304      	movs	r3, #4
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_UART_MspInit+0xa0>)
 80015d0:	f000 fa66 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d4:	2308      	movs	r3, #8
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_UART_MspInit+0xa0>)
 80015e8:	f000 fa5a 	bl	8001aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2026      	movs	r0, #38	; 0x26
 80015f2:	f000 f96c 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f6:	2026      	movs	r0, #38	; 0x26
 80015f8:	f000 f985 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40004400 	.word	0x40004400
 8001608:	40021000 	.word	0x40021000
 800160c:	40010800 	.word	0x40010800

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001610:	f7ff f91a 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <LoopFillZerobss+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800162c:	4c09      	ldr	r4, [pc, #36]	; (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f002 fdef 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7fe ff65 	bl	800050c <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 800164c:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 8001650:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001654:	20000498 	.word	0x20000498

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f923 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff f842 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f93b 	bl	8001922 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f903 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200001e4 	.word	0x200001e4
 80016e0:	200001f4 	.word	0x200001f4
 80016e4:	200001f0 	.word	0x200001f0

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	200001f4 	.word	0x200001f4
 8001708:	20000484 	.word	0x20000484

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000484 	.word	0x20000484

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <__NVIC_EnableIRQ+0x34>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff2d 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff35 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d008      	beq.n	8001964 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e020      	b.n	80019a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 020e 	bic.w	r2, r2, #14
 8001972:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d005      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2204      	movs	r2, #4
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e051      	b.n	8001a78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 020e 	bic.w	r2, r2, #14
 80019e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_DMA_Abort_IT+0xd4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d029      	beq.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_DMA_Abort_IT+0xd8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Abort_IT+0x9e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_DMA_Abort_IT+0xdc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01a      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x98>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_DMA_Abort_IT+0xe0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x92>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <HAL_DMA_Abort_IT+0xe4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00a      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x8c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <HAL_DMA_Abort_IT+0xe8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d102      	bne.n	8001a36 <HAL_DMA_Abort_IT+0x86>
 8001a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a34:	e00e      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a3a:	e00b      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a40:	e008      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a46:	e005      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4c:	e002      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a4e:	2310      	movs	r3, #16
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a52:	2301      	movs	r3, #1
 8001a54:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_DMA_Abort_IT+0xec>)
 8001a56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
    } 
  }
  return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40020008 	.word	0x40020008
 8001a88:	4002001c 	.word	0x4002001c
 8001a8c:	40020030 	.word	0x40020030
 8001a90:	40020044 	.word	0x40020044
 8001a94:	40020058 	.word	0x40020058
 8001a98:	4002006c 	.word	0x4002006c
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e169      	b.n	8001d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8158 	bne.w	8001d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a9a      	ldr	r2, [pc, #616]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d05e      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001adc:	4a98      	ldr	r2, [pc, #608]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d875      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001ae2:	4a98      	ldr	r2, [pc, #608]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d058      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001ae8:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d86f      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001aee:	4a96      	ldr	r2, [pc, #600]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d052      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001af4:	4a94      	ldr	r2, [pc, #592]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d869      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001afa:	4a94      	ldr	r2, [pc, #592]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04c      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b00:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d863      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b06:	4a92      	ldr	r2, [pc, #584]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d046      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b0c:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d85d      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d82a      	bhi.n	8001b6c <HAL_GPIO_Init+0xcc>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d859      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_GPIO_Init+0x80>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b75 	.word	0x08001b75
 8001b28:	08001b87 	.word	0x08001b87
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bcf 	.word	0x08001bcf
 8001b34:	08001bcf 	.word	0x08001bcf
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001bcf 	.word	0x08001bcf
 8001b40:	08001bcf 	.word	0x08001bcf
 8001b44:	08001bcf 	.word	0x08001bcf
 8001b48:	08001bcf 	.word	0x08001bcf
 8001b4c:	08001bcf 	.word	0x08001bcf
 8001b50:	08001bcf 	.word	0x08001bcf
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001bcf 	.word	0x08001bcf
 8001b5c:	08001bcf 	.word	0x08001bcf
 8001b60:	08001bcf 	.word	0x08001bcf
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	4a79      	ldr	r2, [pc, #484]	; (8001d54 <HAL_GPIO_Init+0x2b4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b72:	e02c      	b.n	8001bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e029      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e024      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e01f      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	330c      	adds	r3, #12
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e01a      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e013      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	611a      	str	r2, [r3, #16]
          break;
 8001bba:	e009      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	615a      	str	r2, [r3, #20]
          break;
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          break;
 8001bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d801      	bhi.n	8001bda <HAL_GPIO_Init+0x13a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_Init+0x13e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d802      	bhi.n	8001bec <HAL_GPIO_Init+0x14c>
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x152>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3b08      	subs	r3, #8
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80b1 	beq.w	8001d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a40      	ldr	r2, [pc, #256]	; (8001d60 <HAL_GPIO_Init+0x2c0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_GPIO_Init+0x1ec>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <HAL_GPIO_Init+0x2c4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00d      	beq.n	8001c88 <HAL_GPIO_Init+0x1e8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <HAL_GPIO_Init+0x2c8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x1e4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_GPIO_Init+0x1e0>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e006      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e004      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_GPIO_Init+0x1ee>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	f002 0203 	and.w	r2, r2, #3
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	4093      	lsls	r3, r2
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c9e:	492f      	ldr	r1, [pc, #188]	; (8001d5c <HAL_GPIO_Init+0x2bc>)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	492c      	ldr	r1, [pc, #176]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4928      	ldr	r1, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	491e      	ldr	r1, [pc, #120]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4914      	ldr	r1, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e021      	b.n	8001d82 <HAL_GPIO_Init+0x2e2>
 8001d3e:	bf00      	nop
 8001d40:	10320000 	.word	0x10320000
 8001d44:	10310000 	.word	0x10310000
 8001d48:	10220000 	.word	0x10220000
 8001d4c:	10210000 	.word	0x10210000
 8001d50:	10120000 	.word	0x10120000
 8001d54:	10110000 	.word	0x10110000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40011400 	.word	0x40011400
 8001d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HAL_GPIO_Init+0x304>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f ae8e 	bne.w	8001ab4 <HAL_GPIO_Init+0x14>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	372c      	adds	r7, #44	; 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de6:	787b      	ldrb	r3, [r7, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	400b      	ands	r3, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e26c      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d112      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x12c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d168      	bne.n	8001f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e246      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	4b80      	ldr	r3, [pc, #512]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7f      	ldr	r2, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e02e      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7a      	ldr	r2, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a77      	ldr	r2, [pc, #476]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xbc>
 8001eda:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a67      	ldr	r2, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fbfa 	bl	800170c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fbf6 	bl	800170c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1fa      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe4>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fbe6 	bl	800170c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fbe2 	bl	800170c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1e6      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x10c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7e:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1ba      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4939      	ldr	r1, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fb9b 	bl	800170c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff fb97 	bl	800170c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e19b      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4927      	ldr	r1, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fb7a 	bl	800170c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff fb76 	bl	800170c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e17a      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03a      	beq.n	80020bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_RCC_OscConfig+0x274>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7ff fb5a 	bl	800170c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fb56 	bl	800170c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e15a      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 facc 	bl	8002618 <RCC_Delay>
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_OscConfig+0x274>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7ff fb40 	bl	800170c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fb3c 	bl	800170c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d908      	bls.n	80020b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e140      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	42420000 	.word	0x42420000
 80020ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b9e      	ldr	r3, [pc, #632]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e9      	bne.n	8002090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a6 	beq.w	8002216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b97      	ldr	r3, [pc, #604]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b94      	ldr	r3, [pc, #592]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a93      	ldr	r2, [pc, #588]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b91      	ldr	r3, [pc, #580]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b8e      	ldr	r3, [pc, #568]	; (8002330 <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <HAL_RCC_OscConfig+0x4f8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a8a      	ldr	r2, [pc, #552]	; (8002330 <HAL_RCC_OscConfig+0x4f8>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7ff fafd 	bl	800170c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff faf9 	bl	800170c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0fd      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b81      	ldr	r3, [pc, #516]	; (8002330 <HAL_RCC_OscConfig+0x4f8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 800213c:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x334>
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a75      	ldr	r2, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b73      	ldr	r3, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a72      	ldr	r2, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x356>
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a6c      	ldr	r2, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a63      	ldr	r2, [pc, #396]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff faad 	bl	800170c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff faa9 	bl	800170c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0ab      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b57      	ldr	r3, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x37e>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff fa97 	bl	800170c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa93 	bl	800170c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e095      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b48      	ldr	r3, [pc, #288]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8081 	beq.w	8002322 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d061      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d146      	bne.n	80022c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCC_OscConfig+0x4fc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fa67 	bl	800170c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff fa63 	bl	800170c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e067      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	492d      	ldr	r1, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a19      	ldr	r1, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	430b      	orrs	r3, r1
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x4fc>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff fa37 	bl	800170c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff fa33 	bl	800170c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e037      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
 80022c0:	e02f      	b.n	8002322 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_OscConfig+0x4fc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fa20 	bl	800170c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff fa1c 	bl	800170c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e020      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x498>
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e013      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
 8002334:	42420060 	.word	0x42420060

08002338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4965      	ldr	r1, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e073      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4936      	ldr	r1, [pc, #216]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7ff f970 	bl	800170c <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f96c 	bl	800170c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e053      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1cc>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1d0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f8ce 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000
 80024fc:	40021000 	.word	0x40021000
 8002500:	08004b78 	.word	0x08004b78
 8002504:	200001e4 	.word	0x200001e4
 8002508:	200001f0 	.word	0x200001f0

0800250c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x30>
 8002536:	2b08      	cmp	r3, #8
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x36>
 800253a:	e027      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800253e:	613b      	str	r3, [r7, #16]
      break;
 8002540:	e027      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0c9b      	lsrs	r3, r3, #18
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0c5b      	lsrs	r3, r3, #17
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	fb02 f203 	mul.w	r2, r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e004      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	613b      	str	r3, [r7, #16]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800258e:	613b      	str	r3, [r7, #16]
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	693b      	ldr	r3, [r7, #16]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	007a1200 	.word	0x007a1200
 80025a8:	08004b90 	.word	0x08004b90
 80025ac:	08004ba0 	.word	0x08004ba0
 80025b0:	003d0900 	.word	0x003d0900

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	200001e4 	.word	0x200001e4

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08004b88 	.word	0x08004b88

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0adb      	lsrs	r3, r3, #11
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	08004b88 	.word	0x08004b88

08002618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <RCC_Delay+0x34>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <RCC_Delay+0x38>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a5b      	lsrs	r3, r3, #9
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002634:	bf00      	nop
  }
  while (Delay --);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	60fa      	str	r2, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f9      	bne.n	8002634 <RCC_Delay+0x1c>
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	200001e4 	.word	0x200001e4
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e041      	b.n	80026ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f9ae 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f000 fc30 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d001      	beq.n	800270c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e03a      	b.n	8002782 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_TIM_Base_Start_IT+0x98>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x58>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d009      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x58>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_TIM_Base_Start_IT+0x9c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x58>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_TIM_Base_Start_IT+0xa0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d010      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	e007      	b.n	8002780 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800

08002798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e041      	b.n	800282e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f839 	bl	8002836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 fb8e 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_TIM_PWM_Start+0x24>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e022      	b.n	80028b2 <HAL_TIM_PWM_Start+0x6a>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d109      	bne.n	8002886 <HAL_TIM_PWM_Start+0x3e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e015      	b.n	80028b2 <HAL_TIM_PWM_Start+0x6a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x58>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e008      	b.n	80028b2 <HAL_TIM_PWM_Start+0x6a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e05e      	b.n	8002978 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <HAL_TIM_PWM_Start+0x82>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c8:	e013      	b.n	80028f2 <HAL_TIM_PWM_Start+0xaa>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d104      	bne.n	80028da <HAL_TIM_PWM_Start+0x92>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	e00b      	b.n	80028f2 <HAL_TIM_PWM_Start+0xaa>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d104      	bne.n	80028ea <HAL_TIM_PWM_Start+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	e003      	b.n	80028f2 <HAL_TIM_PWM_Start+0xaa>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd7c 	bl	80033f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_TIM_PWM_Start+0x138>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d107      	bne.n	800291a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_TIM_PWM_Start+0x138>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_TIM_PWM_Start+0xfa>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d009      	beq.n	8002942 <HAL_TIM_PWM_Start+0xfa>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_TIM_PWM_Start+0x13c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_TIM_PWM_Start+0xfa>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_TIM_PWM_Start+0x140>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d111      	bne.n	8002966 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d010      	beq.n	8002976 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	e007      	b.n	8002976 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa76 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa69 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa78 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0204 	mvn.w	r2, #4
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa4c 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa3f 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa4e 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0208 	mvn.w	r2, #8
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa22 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fa15 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fa24 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0210 	mvn.w	r2, #16
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f9f8 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9eb 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f9fa 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fd69 	bl	80005e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fce9 	bl	800350e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f9be 	bl	8002ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0220 	mvn.w	r2, #32
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fcb4 	bl	80034fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0ae      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	f200 809f 	bhi.w	8002d08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bca:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002d09 	.word	0x08002d09
 8002bd8:	08002d09 	.word	0x08002d09
 8002bdc:	08002d09 	.word	0x08002d09
 8002be0:	08002c45 	.word	0x08002c45
 8002be4:	08002d09 	.word	0x08002d09
 8002be8:	08002d09 	.word	0x08002d09
 8002bec:	08002d09 	.word	0x08002d09
 8002bf0:	08002c87 	.word	0x08002c87
 8002bf4:	08002d09 	.word	0x08002d09
 8002bf8:	08002d09 	.word	0x08002d09
 8002bfc:	08002d09 	.word	0x08002d09
 8002c00:	08002cc7 	.word	0x08002cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f9d6 	bl	8002fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
      break;
 8002c42:	e064      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa1c 	bl	8003088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6999      	ldr	r1, [r3, #24]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	021a      	lsls	r2, r3, #8
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
      break;
 8002c84:	e043      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fa65 	bl	800315c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0208 	orr.w	r2, r2, #8
 8002ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0204 	bic.w	r2, r2, #4
 8002cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69d9      	ldr	r1, [r3, #28]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	61da      	str	r2, [r3, #28]
      break;
 8002cc4:	e023      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 faaf 	bl	8003230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69d9      	ldr	r1, [r3, #28]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	021a      	lsls	r2, r3, #8
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	61da      	str	r2, [r3, #28]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_ConfigClockSource+0x1c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0b4      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x186>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d74:	d03e      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	f200 8087 	bhi.w	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	f000 8086 	beq.w	8002e92 <HAL_TIM_ConfigClockSource+0x172>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d87f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d87b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d050      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x11a>
 8002d98:	2b60      	cmp	r3, #96	; 0x60
 8002d9a:	d877      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d03c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xfa>
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d873      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d058      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x13a>
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d86f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b30      	cmp	r3, #48	; 0x30
 8002dae:	d064      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d86b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d060      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d867      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d05a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	e062      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f000 faf0 	bl	80033ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
      break;
 8002df2:	e04f      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f000 fad9 	bl	80033ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e16:	609a      	str	r2, [r3, #8]
      break;
 8002e18:	e03c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 fa50 	bl	80032cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2150      	movs	r1, #80	; 0x50
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 faa7 	bl	8003386 <TIM_ITRx_SetConfig>
      break;
 8002e38:	e02c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 fa6e 	bl	8003328 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2160      	movs	r1, #96	; 0x60
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fa97 	bl	8003386 <TIM_ITRx_SetConfig>
      break;
 8002e58:	e01c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 fa30 	bl	80032cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa87 	bl	8003386 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e00c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 fa7e 	bl	8003386 <TIM_ITRx_SetConfig>
      break;
 8002e8a:	e003      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e000      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_Base_SetConfig+0xb8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <TIM_Base_SetConfig+0x30>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d007      	beq.n	8002f28 <TIM_Base_SetConfig+0x30>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <TIM_Base_SetConfig+0xbc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <TIM_Base_SetConfig+0x30>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d108      	bne.n	8002f3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <TIM_Base_SetConfig+0xb8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_Base_SetConfig+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d007      	beq.n	8002f5a <TIM_Base_SetConfig+0x62>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <TIM_Base_SetConfig+0xbc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_Base_SetConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d108      	bne.n	8002f6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <TIM_Base_SetConfig+0xb8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d103      	bne.n	8002fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800

08002fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 0201 	bic.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_OC1_SetConfig+0xc8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10c      	bne.n	8003032 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0308 	bic.w	r3, r3, #8
 800301e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 0304 	bic.w	r3, r3, #4
 8003030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <TIM_OC1_SetConfig+0xc8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d111      	bne.n	800305e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40012c00 	.word	0x40012c00

08003088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 0210 	bic.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0320 	bic.w	r3, r3, #32
 80030d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <TIM_OC2_SetConfig+0xd0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10d      	bne.n	8003104 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <TIM_OC2_SetConfig+0xd0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d113      	bne.n	8003134 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800311a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00

0800315c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <TIM_OC3_SetConfig+0xd0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10d      	bne.n	80031d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <TIM_OC3_SetConfig+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d113      	bne.n	8003206 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00

08003230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800327a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <TIM_OC4_SetConfig+0x98>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00

080032cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0201 	bic.w	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f023 030a 	bic.w	r3, r3, #10
 8003308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0210 	bic.w	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	031b      	lsls	r3, r3, #12
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003364:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f043 0307 	orr.w	r3, r3, #7
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	021a      	lsls	r2, r3, #8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	431a      	orrs	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	609a      	str	r2, [r3, #8]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2201      	movs	r2, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	43db      	mvns	r3, r3
 800341a:	401a      	ands	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e046      	b.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d009      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10c      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800

080034fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e042      	b.n	80035b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe f810 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fdc5 	bl	80040f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d16d      	bne.n	80036bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Transmit+0x2c>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e066      	b.n	80036be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	; 0x21
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fe:	f7fe f885 	bl	800170c <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	d108      	bne.n	800362c <HAL_UART_Transmit+0x6c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e003      	b.n	8003634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003634:	e02a      	b.n	800368c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb14 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e036      	b.n	80036be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3302      	adds	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cf      	bne.n	8003636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fae4 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d112      	bne.n	8003706 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_UART_Receive_IT+0x26>
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00b      	b.n	8003708 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	461a      	mov	r2, r3
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fb24 	bl	8003d4a <UART_Start_Receive_IT>
 8003702:	4603      	mov	r3, r0
 8003704:	e000      	b.n	8003708 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003706:	2302      	movs	r3, #2
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0ba      	sub	sp, #232	; 0xe8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800374e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_UART_IRQHandler+0x66>
 8003762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fc01 	bl	8003f76 <UART_Receive_IT>
      return;
 8003774:	e25b      	b.n	8003c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80de 	beq.w	800393c <HAL_UART_IRQHandler+0x22c>
 8003780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80d1 	beq.w	800393c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_UART_IRQHandler+0xae>
 80037a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_UART_IRQHandler+0xd2>
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_UART_IRQHandler+0xf6>
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0204 	orr.w	r2, r3, #4
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_UART_IRQHandler+0x126>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 81f2 	beq.w	8003c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_UART_IRQHandler+0x14e>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fb8c 	bl	8003f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_UART_IRQHandler+0x17a>
 8003882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04f      	beq.n	800392a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa96 	bl	8003dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d041      	beq.n	8003922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1d9      	bne.n	800389e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d013      	beq.n	800391a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	4a7e      	ldr	r2, [pc, #504]	; (8003af0 <HAL_UART_IRQHandler+0x3e0>)
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe f856 	bl	80019b0 <HAL_DMA_Abort_IT>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	e00e      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f993 	bl	8003c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00a      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f98f 	bl	8003c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e006      	b.n	8003938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f98b 	bl	8003c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003936:	e175      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	bf00      	nop
    return;
 800393a:	e173      	b.n	8003c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	2b01      	cmp	r3, #1
 8003942:	f040 814f 	bne.w	8003be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8148 	beq.w	8003be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8141 	beq.w	8003be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80b6 	beq.w	8003af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8145 	beq.w	8003c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f080 813e 	bcs.w	8003c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f000 8088 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1d9      	bne.n	80039c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e1      	bne.n	8003a0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e3      	bne.n	8003a48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	f023 0310 	bic.w	r3, r3, #16
 8003aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd ff35 	bl	800193a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8b6 	bl	8003c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aec:	e09c      	b.n	8003c28 <HAL_UART_IRQHandler+0x518>
 8003aee:	bf00      	nop
 8003af0:	08003e81 	.word	0x08003e81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 808e 	beq.w	8003c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8089 	beq.w	8003c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e3      	bne.n	8003b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	623b      	str	r3, [r7, #32]
   return(result);
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b76:	633a      	str	r2, [r7, #48]	; 0x30
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0310 	bic.w	r3, r3, #16
 8003bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bbc:	61fa      	str	r2, [r7, #28]
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	69b9      	ldr	r1, [r7, #24]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e3      	bne.n	8003b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f83b 	bl	8003c58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be2:	e023      	b.n	8003c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_UART_IRQHandler+0x4f4>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f953 	bl	8003ea8 <UART_Transmit_IT>
    return;
 8003c02:	e014      	b.n	8003c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <HAL_UART_IRQHandler+0x51e>
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f992 	bl	8003f46 <UART_EndTransmit_IT>
    return;
 8003c22:	e004      	b.n	8003c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c24:	bf00      	nop
 8003c26:	e002      	b.n	8003c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c28:	bf00      	nop
 8003c2a:	e000      	b.n	8003c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c2c:	bf00      	nop
  }
}
 8003c2e:	37e8      	adds	r7, #232	; 0xe8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b090      	sub	sp, #64	; 0x40
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	e050      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d04c      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8e:	f7fd fd3d 	bl	800170c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d241      	bcs.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cbe:	637a      	str	r2, [r7, #52]	; 0x34
 8003cc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3314      	adds	r3, #20
 8003cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf2:	623a      	str	r2, [r7, #32]
 8003cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	69f9      	ldr	r1, [r7, #28]
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e00f      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d09f      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3740      	adds	r7, #64	; 0x40
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	88fa      	ldrh	r2, [r7, #6]
 8003d62:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2222      	movs	r2, #34	; 0x22
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b095      	sub	sp, #84	; 0x54
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003de4:	643a      	str	r2, [r7, #64]	; 0x40
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0310 	bic.w	r3, r3, #16
 8003e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e54:	61ba      	str	r2, [r7, #24]
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	613b      	str	r3, [r7, #16]
   return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e76:	bf00      	nop
 8003e78:	3754      	adds	r7, #84	; 0x54
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff fed3 	bl	8003c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b21      	cmp	r3, #33	; 0x21
 8003eba:	d13e      	bne.n	8003f3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d114      	bne.n	8003ef0 <UART_Transmit_IT+0x48>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d110      	bne.n	8003ef0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	e008      	b.n	8003f02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	1c59      	adds	r1, r3, #1
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6211      	str	r1, [r2, #32]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe64 	bl	8003c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b08c      	sub	sp, #48	; 0x30
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b22      	cmp	r3, #34	; 0x22
 8003f88:	f040 80ae 	bne.w	80040e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d117      	bne.n	8003fc6 <UART_Receive_IT+0x50>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d113      	bne.n	8003fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc4:	e026      	b.n	8004014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd8:	d007      	beq.n	8003fea <UART_Receive_IT+0x74>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <UART_Receive_IT+0x82>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e008      	b.n	800400a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004004:	b2da      	uxtb	r2, r3
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4619      	mov	r1, r3
 8004022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004024:	2b00      	cmp	r3, #0
 8004026:	d15d      	bne.n	80040e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0220 	bic.w	r2, r2, #32
 8004036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	2b01      	cmp	r3, #1
 800406c:	d135      	bne.n	80040da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f023 0310 	bic.w	r3, r3, #16
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	623a      	str	r2, [r7, #32]
 8004096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d10a      	bne.n	80040cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fdc0 	bl	8003c58 <HAL_UARTEx_RxEventCallback>
 80040d8:	e002      	b.n	80040e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd f986 	bl	80013ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e002      	b.n	80040ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3730      	adds	r7, #48	; 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800412e:	f023 030c 	bic.w	r3, r3, #12
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	430b      	orrs	r3, r1
 800413a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <UART_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d103      	bne.n	8004164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7fe fa48 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	e002      	b.n	800416a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe fa30 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	0119      	lsls	r1, r3, #4
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	; 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	4419      	add	r1, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <UART_SetConfig+0x118>)
 80041da:	fba3 0302 	umull	r0, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2064      	movs	r0, #100	; 0x64
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a07      	ldr	r2, [pc, #28]	; (800420c <UART_SetConfig+0x118>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	440a      	add	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40013800 	.word	0x40013800
 800420c:	51eb851f 	.word	0x51eb851f

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	200001f8 	.word	0x200001f8

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	2600      	movs	r6, #0
 8004220:	4d0c      	ldr	r5, [pc, #48]	; (8004254 <__libc_init_array+0x38>)
 8004222:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	f000 fc5c 	bl	8004ae8 <_init>
 8004230:	2600      	movs	r6, #0
 8004232:	4d0a      	ldr	r5, [pc, #40]	; (800425c <__libc_init_array+0x40>)
 8004234:	4c0a      	ldr	r4, [pc, #40]	; (8004260 <__libc_init_array+0x44>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08004bd8 	.word	0x08004bd8
 8004258:	08004bd8 	.word	0x08004bd8
 800425c:	08004bd8 	.word	0x08004bd8
 8004260:	08004bdc 	.word	0x08004bdc

08004264 <memset>:
 8004264:	4603      	mov	r3, r0
 8004266:	4402      	add	r2, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <siprintf>:
 8004274:	b40e      	push	{r1, r2, r3}
 8004276:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800427a:	b500      	push	{lr}
 800427c:	b09c      	sub	sp, #112	; 0x70
 800427e:	ab1d      	add	r3, sp, #116	; 0x74
 8004280:	9002      	str	r0, [sp, #8]
 8004282:	9006      	str	r0, [sp, #24]
 8004284:	9107      	str	r1, [sp, #28]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <siprintf+0x38>)
 800428a:	4909      	ldr	r1, [pc, #36]	; (80042b0 <siprintf+0x3c>)
 800428c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004290:	9105      	str	r1, [sp, #20]
 8004292:	6800      	ldr	r0, [r0, #0]
 8004294:	a902      	add	r1, sp, #8
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	f000 f868 	bl	800436c <_svfiprintf_r>
 800429c:	2200      	movs	r2, #0
 800429e:	9b02      	ldr	r3, [sp, #8]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	b01c      	add	sp, #112	; 0x70
 80042a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a8:	b003      	add	sp, #12
 80042aa:	4770      	bx	lr
 80042ac:	200001f8 	.word	0x200001f8
 80042b0:	ffff0208 	.word	0xffff0208

080042b4 <__ssputs_r>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	688e      	ldr	r6, [r1, #8]
 80042ba:	4682      	mov	sl, r0
 80042bc:	429e      	cmp	r6, r3
 80042be:	460c      	mov	r4, r1
 80042c0:	4690      	mov	r8, r2
 80042c2:	461f      	mov	r7, r3
 80042c4:	d838      	bhi.n	8004338 <__ssputs_r+0x84>
 80042c6:	898a      	ldrh	r2, [r1, #12]
 80042c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042cc:	d032      	beq.n	8004334 <__ssputs_r+0x80>
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	6909      	ldr	r1, [r1, #16]
 80042d2:	3301      	adds	r3, #1
 80042d4:	eba5 0901 	sub.w	r9, r5, r1
 80042d8:	6965      	ldr	r5, [r4, #20]
 80042da:	444b      	add	r3, r9
 80042dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042e4:	106d      	asrs	r5, r5, #1
 80042e6:	429d      	cmp	r5, r3
 80042e8:	bf38      	it	cc
 80042ea:	461d      	movcc	r5, r3
 80042ec:	0553      	lsls	r3, r2, #21
 80042ee:	d531      	bpl.n	8004354 <__ssputs_r+0xa0>
 80042f0:	4629      	mov	r1, r5
 80042f2:	f000 fb53 	bl	800499c <_malloc_r>
 80042f6:	4606      	mov	r6, r0
 80042f8:	b950      	cbnz	r0, 8004310 <__ssputs_r+0x5c>
 80042fa:	230c      	movs	r3, #12
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	f8ca 3000 	str.w	r3, [sl]
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	464a      	mov	r2, r9
 8004312:	6921      	ldr	r1, [r4, #16]
 8004314:	f000 face 	bl	80048b4 <memcpy>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	6126      	str	r6, [r4, #16]
 8004326:	444e      	add	r6, r9
 8004328:	6026      	str	r6, [r4, #0]
 800432a:	463e      	mov	r6, r7
 800432c:	6165      	str	r5, [r4, #20]
 800432e:	eba5 0509 	sub.w	r5, r5, r9
 8004332:	60a5      	str	r5, [r4, #8]
 8004334:	42be      	cmp	r6, r7
 8004336:	d900      	bls.n	800433a <__ssputs_r+0x86>
 8004338:	463e      	mov	r6, r7
 800433a:	4632      	mov	r2, r6
 800433c:	4641      	mov	r1, r8
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	f000 fac6 	bl	80048d0 <memmove>
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	4432      	add	r2, r6
 800434c:	2000      	movs	r0, #0
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	6022      	str	r2, [r4, #0]
 8004352:	e7db      	b.n	800430c <__ssputs_r+0x58>
 8004354:	462a      	mov	r2, r5
 8004356:	f000 fb7b 	bl	8004a50 <_realloc_r>
 800435a:	4606      	mov	r6, r0
 800435c:	2800      	cmp	r0, #0
 800435e:	d1e1      	bne.n	8004324 <__ssputs_r+0x70>
 8004360:	4650      	mov	r0, sl
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	f000 face 	bl	8004904 <_free_r>
 8004368:	e7c7      	b.n	80042fa <__ssputs_r+0x46>
	...

0800436c <_svfiprintf_r>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	4698      	mov	r8, r3
 8004372:	898b      	ldrh	r3, [r1, #12]
 8004374:	4607      	mov	r7, r0
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	460d      	mov	r5, r1
 800437a:	4614      	mov	r4, r2
 800437c:	b09d      	sub	sp, #116	; 0x74
 800437e:	d50e      	bpl.n	800439e <_svfiprintf_r+0x32>
 8004380:	690b      	ldr	r3, [r1, #16]
 8004382:	b963      	cbnz	r3, 800439e <_svfiprintf_r+0x32>
 8004384:	2140      	movs	r1, #64	; 0x40
 8004386:	f000 fb09 	bl	800499c <_malloc_r>
 800438a:	6028      	str	r0, [r5, #0]
 800438c:	6128      	str	r0, [r5, #16]
 800438e:	b920      	cbnz	r0, 800439a <_svfiprintf_r+0x2e>
 8004390:	230c      	movs	r3, #12
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	e0d1      	b.n	800453e <_svfiprintf_r+0x1d2>
 800439a:	2340      	movs	r3, #64	; 0x40
 800439c:	616b      	str	r3, [r5, #20]
 800439e:	2300      	movs	r3, #0
 80043a0:	9309      	str	r3, [sp, #36]	; 0x24
 80043a2:	2320      	movs	r3, #32
 80043a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043a8:	2330      	movs	r3, #48	; 0x30
 80043aa:	f04f 0901 	mov.w	r9, #1
 80043ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80043b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004558 <_svfiprintf_r+0x1ec>
 80043b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ba:	4623      	mov	r3, r4
 80043bc:	469a      	mov	sl, r3
 80043be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c2:	b10a      	cbz	r2, 80043c8 <_svfiprintf_r+0x5c>
 80043c4:	2a25      	cmp	r2, #37	; 0x25
 80043c6:	d1f9      	bne.n	80043bc <_svfiprintf_r+0x50>
 80043c8:	ebba 0b04 	subs.w	fp, sl, r4
 80043cc:	d00b      	beq.n	80043e6 <_svfiprintf_r+0x7a>
 80043ce:	465b      	mov	r3, fp
 80043d0:	4622      	mov	r2, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff ff6d 	bl	80042b4 <__ssputs_r>
 80043da:	3001      	adds	r0, #1
 80043dc:	f000 80aa 	beq.w	8004534 <_svfiprintf_r+0x1c8>
 80043e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043e2:	445a      	add	r2, fp
 80043e4:	9209      	str	r2, [sp, #36]	; 0x24
 80043e6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80a2 	beq.w	8004534 <_svfiprintf_r+0x1c8>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043fa:	f10a 0a01 	add.w	sl, sl, #1
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004406:	931a      	str	r3, [sp, #104]	; 0x68
 8004408:	4654      	mov	r4, sl
 800440a:	2205      	movs	r2, #5
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	4851      	ldr	r0, [pc, #324]	; (8004558 <_svfiprintf_r+0x1ec>)
 8004412:	f000 fa41 	bl	8004898 <memchr>
 8004416:	9a04      	ldr	r2, [sp, #16]
 8004418:	b9d8      	cbnz	r0, 8004452 <_svfiprintf_r+0xe6>
 800441a:	06d0      	lsls	r0, r2, #27
 800441c:	bf44      	itt	mi
 800441e:	2320      	movmi	r3, #32
 8004420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004424:	0711      	lsls	r1, r2, #28
 8004426:	bf44      	itt	mi
 8004428:	232b      	movmi	r3, #43	; 0x2b
 800442a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800442e:	f89a 3000 	ldrb.w	r3, [sl]
 8004432:	2b2a      	cmp	r3, #42	; 0x2a
 8004434:	d015      	beq.n	8004462 <_svfiprintf_r+0xf6>
 8004436:	4654      	mov	r4, sl
 8004438:	2000      	movs	r0, #0
 800443a:	f04f 0c0a 	mov.w	ip, #10
 800443e:	9a07      	ldr	r2, [sp, #28]
 8004440:	4621      	mov	r1, r4
 8004442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004446:	3b30      	subs	r3, #48	; 0x30
 8004448:	2b09      	cmp	r3, #9
 800444a:	d94e      	bls.n	80044ea <_svfiprintf_r+0x17e>
 800444c:	b1b0      	cbz	r0, 800447c <_svfiprintf_r+0x110>
 800444e:	9207      	str	r2, [sp, #28]
 8004450:	e014      	b.n	800447c <_svfiprintf_r+0x110>
 8004452:	eba0 0308 	sub.w	r3, r0, r8
 8004456:	fa09 f303 	lsl.w	r3, r9, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	46a2      	mov	sl, r4
 800445e:	9304      	str	r3, [sp, #16]
 8004460:	e7d2      	b.n	8004408 <_svfiprintf_r+0x9c>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	9103      	str	r1, [sp, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfbb      	ittet	lt
 800446e:	425b      	neglt	r3, r3
 8004470:	f042 0202 	orrlt.w	r2, r2, #2
 8004474:	9307      	strge	r3, [sp, #28]
 8004476:	9307      	strlt	r3, [sp, #28]
 8004478:	bfb8      	it	lt
 800447a:	9204      	strlt	r2, [sp, #16]
 800447c:	7823      	ldrb	r3, [r4, #0]
 800447e:	2b2e      	cmp	r3, #46	; 0x2e
 8004480:	d10c      	bne.n	800449c <_svfiprintf_r+0x130>
 8004482:	7863      	ldrb	r3, [r4, #1]
 8004484:	2b2a      	cmp	r3, #42	; 0x2a
 8004486:	d135      	bne.n	80044f4 <_svfiprintf_r+0x188>
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	3402      	adds	r4, #2
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	9203      	str	r2, [sp, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bfb8      	it	lt
 8004496:	f04f 33ff 	movlt.w	r3, #4294967295
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004568 <_svfiprintf_r+0x1fc>
 80044a0:	2203      	movs	r2, #3
 80044a2:	4650      	mov	r0, sl
 80044a4:	7821      	ldrb	r1, [r4, #0]
 80044a6:	f000 f9f7 	bl	8004898 <memchr>
 80044aa:	b140      	cbz	r0, 80044be <_svfiprintf_r+0x152>
 80044ac:	2340      	movs	r3, #64	; 0x40
 80044ae:	eba0 000a 	sub.w	r0, r0, sl
 80044b2:	fa03 f000 	lsl.w	r0, r3, r0
 80044b6:	9b04      	ldr	r3, [sp, #16]
 80044b8:	3401      	adds	r4, #1
 80044ba:	4303      	orrs	r3, r0
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c2:	2206      	movs	r2, #6
 80044c4:	4825      	ldr	r0, [pc, #148]	; (800455c <_svfiprintf_r+0x1f0>)
 80044c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ca:	f000 f9e5 	bl	8004898 <memchr>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d038      	beq.n	8004544 <_svfiprintf_r+0x1d8>
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <_svfiprintf_r+0x1f4>)
 80044d4:	bb1b      	cbnz	r3, 800451e <_svfiprintf_r+0x1b2>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	3307      	adds	r3, #7
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	3308      	adds	r3, #8
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e4:	4433      	add	r3, r6
 80044e6:	9309      	str	r3, [sp, #36]	; 0x24
 80044e8:	e767      	b.n	80043ba <_svfiprintf_r+0x4e>
 80044ea:	460c      	mov	r4, r1
 80044ec:	2001      	movs	r0, #1
 80044ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f2:	e7a5      	b.n	8004440 <_svfiprintf_r+0xd4>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f04f 0c0a 	mov.w	ip, #10
 80044fa:	4619      	mov	r1, r3
 80044fc:	3401      	adds	r4, #1
 80044fe:	9305      	str	r3, [sp, #20]
 8004500:	4620      	mov	r0, r4
 8004502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004506:	3a30      	subs	r2, #48	; 0x30
 8004508:	2a09      	cmp	r2, #9
 800450a:	d903      	bls.n	8004514 <_svfiprintf_r+0x1a8>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0c5      	beq.n	800449c <_svfiprintf_r+0x130>
 8004510:	9105      	str	r1, [sp, #20]
 8004512:	e7c3      	b.n	800449c <_svfiprintf_r+0x130>
 8004514:	4604      	mov	r4, r0
 8004516:	2301      	movs	r3, #1
 8004518:	fb0c 2101 	mla	r1, ip, r1, r2
 800451c:	e7f0      	b.n	8004500 <_svfiprintf_r+0x194>
 800451e:	ab03      	add	r3, sp, #12
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462a      	mov	r2, r5
 8004524:	4638      	mov	r0, r7
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <_svfiprintf_r+0x1f8>)
 8004528:	a904      	add	r1, sp, #16
 800452a:	f3af 8000 	nop.w
 800452e:	1c42      	adds	r2, r0, #1
 8004530:	4606      	mov	r6, r0
 8004532:	d1d6      	bne.n	80044e2 <_svfiprintf_r+0x176>
 8004534:	89ab      	ldrh	r3, [r5, #12]
 8004536:	065b      	lsls	r3, r3, #25
 8004538:	f53f af2c 	bmi.w	8004394 <_svfiprintf_r+0x28>
 800453c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453e:	b01d      	add	sp, #116	; 0x74
 8004540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004544:	ab03      	add	r3, sp, #12
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	462a      	mov	r2, r5
 800454a:	4638      	mov	r0, r7
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_svfiprintf_r+0x1f8>)
 800454e:	a904      	add	r1, sp, #16
 8004550:	f000 f87c 	bl	800464c <_printf_i>
 8004554:	e7eb      	b.n	800452e <_svfiprintf_r+0x1c2>
 8004556:	bf00      	nop
 8004558:	08004ba2 	.word	0x08004ba2
 800455c:	08004bac 	.word	0x08004bac
 8004560:	00000000 	.word	0x00000000
 8004564:	080042b5 	.word	0x080042b5
 8004568:	08004ba8 	.word	0x08004ba8

0800456c <_printf_common>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	4616      	mov	r6, r2
 8004572:	4699      	mov	r9, r3
 8004574:	688a      	ldr	r2, [r1, #8]
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	4607      	mov	r7, r0
 800457a:	4293      	cmp	r3, r2
 800457c:	bfb8      	it	lt
 800457e:	4613      	movlt	r3, r2
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004586:	460c      	mov	r4, r1
 8004588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800458c:	b10a      	cbz	r2, 8004592 <_printf_common+0x26>
 800458e:	3301      	adds	r3, #1
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	0699      	lsls	r1, r3, #26
 8004596:	bf42      	ittt	mi
 8004598:	6833      	ldrmi	r3, [r6, #0]
 800459a:	3302      	addmi	r3, #2
 800459c:	6033      	strmi	r3, [r6, #0]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	f015 0506 	ands.w	r5, r5, #6
 80045a4:	d106      	bne.n	80045b4 <_printf_common+0x48>
 80045a6:	f104 0a19 	add.w	sl, r4, #25
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	42ab      	cmp	r3, r5
 80045b2:	dc28      	bgt.n	8004606 <_printf_common+0x9a>
 80045b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b8:	1e13      	subs	r3, r2, #0
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	bf18      	it	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	0692      	lsls	r2, r2, #26
 80045c2:	d42d      	bmi.n	8004620 <_printf_common+0xb4>
 80045c4:	4649      	mov	r1, r9
 80045c6:	4638      	mov	r0, r7
 80045c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d020      	beq.n	8004614 <_printf_common+0xa8>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	68e5      	ldr	r5, [r4, #12]
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf18      	it	ne
 80045de:	2500      	movne	r5, #0
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	f04f 0600 	mov.w	r6, #0
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	bf08      	it	eq
 80045ea:	1aad      	subeq	r5, r5, r2
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	bf08      	it	eq
 80045f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f4:	4293      	cmp	r3, r2
 80045f6:	bfc4      	itt	gt
 80045f8:	1a9b      	subgt	r3, r3, r2
 80045fa:	18ed      	addgt	r5, r5, r3
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xcc>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xac>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4649      	mov	r1, r9
 800460c:	4638      	mov	r0, r7
 800460e:	47c0      	blx	r8
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xb0>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c4      	b.n	80045aa <_printf_common+0x3e>
 8004620:	2030      	movs	r0, #48	; 0x30
 8004622:	18e1      	adds	r1, r4, r3
 8004624:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800462e:	4422      	add	r2, r4
 8004630:	3302      	adds	r3, #2
 8004632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004636:	e7c5      	b.n	80045c4 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa8>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x92>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	460c      	mov	r4, r1
 8004652:	7e27      	ldrb	r7, [r4, #24]
 8004654:	4691      	mov	r9, r2
 8004656:	2f78      	cmp	r7, #120	; 0x78
 8004658:	4680      	mov	r8, r0
 800465a:	469a      	mov	sl, r3
 800465c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800465e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d9 	beq.w	8004820 <_printf_i+0x1d4>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80a4 	beq.w	80047bc <_printf_i+0x170>
 8004674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a001      	add	r0, pc, #4	; (adr r0, 800468c <_printf_i+0x40>)
 8004688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	08004807 	.word	0x08004807
 80046bc:	08004729 	.word	0x08004729
 80046c0:	080047e9 	.word	0x080047e9
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004829 	.word	0x08004829
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047f1 	.word	0x080047f1
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	600a      	str	r2, [r1, #0]
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a4      	b.n	8004842 <_printf_i+0x1f6>
 80046f8:	6825      	ldr	r5, [r4, #0]
 80046fa:	6808      	ldr	r0, [r1, #0]
 80046fc:	062e      	lsls	r6, r5, #24
 80046fe:	f100 0304 	add.w	r3, r0, #4
 8004702:	d50a      	bpl.n	800471a <_printf_i+0xce>
 8004704:	6805      	ldr	r5, [r0, #0]
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	2d00      	cmp	r5, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xc8>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	426d      	negs	r5, r5
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004714:	230a      	movs	r3, #10
 8004716:	485e      	ldr	r0, [pc, #376]	; (8004890 <_printf_i+0x244>)
 8004718:	e019      	b.n	800474e <_printf_i+0x102>
 800471a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800471e:	6805      	ldr	r5, [r0, #0]
 8004720:	600b      	str	r3, [r1, #0]
 8004722:	bf18      	it	ne
 8004724:	b22d      	sxthne	r5, r5
 8004726:	e7ef      	b.n	8004708 <_printf_i+0xbc>
 8004728:	680b      	ldr	r3, [r1, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	1d18      	adds	r0, r3, #4
 800472e:	6008      	str	r0, [r1, #0]
 8004730:	0628      	lsls	r0, r5, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xec>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xf2>
 8004738:	0669      	lsls	r1, r5, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe8>
 800473c:	881d      	ldrh	r5, [r3, #0]
 800473e:	2f6f      	cmp	r7, #111	; 0x6f
 8004740:	bf0c      	ite	eq
 8004742:	2308      	moveq	r3, #8
 8004744:	230a      	movne	r3, #10
 8004746:	4852      	ldr	r0, [pc, #328]	; (8004890 <_printf_i+0x244>)
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6866      	ldr	r6, [r4, #4]
 8004750:	2e00      	cmp	r6, #0
 8004752:	bfa8      	it	ge
 8004754:	6821      	ldrge	r1, [r4, #0]
 8004756:	60a6      	str	r6, [r4, #8]
 8004758:	bfa4      	itt	ge
 800475a:	f021 0104 	bicge.w	r1, r1, #4
 800475e:	6021      	strge	r1, [r4, #0]
 8004760:	b90d      	cbnz	r5, 8004766 <_printf_i+0x11a>
 8004762:	2e00      	cmp	r6, #0
 8004764:	d04d      	beq.n	8004802 <_printf_i+0x1b6>
 8004766:	4616      	mov	r6, r2
 8004768:	fbb5 f1f3 	udiv	r1, r5, r3
 800476c:	fb03 5711 	mls	r7, r3, r1, r5
 8004770:	5dc7      	ldrb	r7, [r0, r7]
 8004772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004776:	462f      	mov	r7, r5
 8004778:	42bb      	cmp	r3, r7
 800477a:	460d      	mov	r5, r1
 800477c:	d9f4      	bls.n	8004768 <_printf_i+0x11c>
 800477e:	2b08      	cmp	r3, #8
 8004780:	d10b      	bne.n	800479a <_printf_i+0x14e>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	07df      	lsls	r7, r3, #31
 8004786:	d508      	bpl.n	800479a <_printf_i+0x14e>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	6861      	ldr	r1, [r4, #4]
 800478c:	4299      	cmp	r1, r3
 800478e:	bfde      	ittt	le
 8004790:	2330      	movle	r3, #48	; 0x30
 8004792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004796:	f106 36ff 	addle.w	r6, r6, #4294967295
 800479a:	1b92      	subs	r2, r2, r6
 800479c:	6122      	str	r2, [r4, #16]
 800479e:	464b      	mov	r3, r9
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f8cd a000 	str.w	sl, [sp]
 80047a8:	aa03      	add	r2, sp, #12
 80047aa:	f7ff fedf 	bl	800456c <_printf_common>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d14c      	bne.n	800484c <_printf_i+0x200>
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295
 80047b6:	b004      	add	sp, #16
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	4834      	ldr	r0, [pc, #208]	; (8004890 <_printf_i+0x244>)
 80047be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c2:	680e      	ldr	r6, [r1, #0]
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80047ca:	061f      	lsls	r7, r3, #24
 80047cc:	600e      	str	r6, [r1, #0]
 80047ce:	d514      	bpl.n	80047fa <_printf_i+0x1ae>
 80047d0:	07d9      	lsls	r1, r3, #31
 80047d2:	bf44      	itt	mi
 80047d4:	f043 0320 	orrmi.w	r3, r3, #32
 80047d8:	6023      	strmi	r3, [r4, #0]
 80047da:	b91d      	cbnz	r5, 80047e4 <_printf_i+0x198>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f023 0320 	bic.w	r3, r3, #32
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2310      	movs	r3, #16
 80047e6:	e7af      	b.n	8004748 <_printf_i+0xfc>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	2378      	movs	r3, #120	; 0x78
 80047f2:	4828      	ldr	r0, [pc, #160]	; (8004894 <_printf_i+0x248>)
 80047f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f8:	e7e3      	b.n	80047c2 <_printf_i+0x176>
 80047fa:	065e      	lsls	r6, r3, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2ad      	uxthmi	r5, r5
 8004800:	e7e6      	b.n	80047d0 <_printf_i+0x184>
 8004802:	4616      	mov	r6, r2
 8004804:	e7bb      	b.n	800477e <_printf_i+0x132>
 8004806:	680b      	ldr	r3, [r1, #0]
 8004808:	6826      	ldr	r6, [r4, #0]
 800480a:	1d1d      	adds	r5, r3, #4
 800480c:	6960      	ldr	r0, [r4, #20]
 800480e:	600d      	str	r5, [r1, #0]
 8004810:	0635      	lsls	r5, r6, #24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	d501      	bpl.n	800481a <_printf_i+0x1ce>
 8004816:	6018      	str	r0, [r3, #0]
 8004818:	e002      	b.n	8004820 <_printf_i+0x1d4>
 800481a:	0671      	lsls	r1, r6, #25
 800481c:	d5fb      	bpl.n	8004816 <_printf_i+0x1ca>
 800481e:	8018      	strh	r0, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	4616      	mov	r6, r2
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	e7ba      	b.n	800479e <_printf_i+0x152>
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	600a      	str	r2, [r1, #0]
 800482e:	681e      	ldr	r6, [r3, #0]
 8004830:	2100      	movs	r1, #0
 8004832:	4630      	mov	r0, r6
 8004834:	6862      	ldr	r2, [r4, #4]
 8004836:	f000 f82f 	bl	8004898 <memchr>
 800483a:	b108      	cbz	r0, 8004840 <_printf_i+0x1f4>
 800483c:	1b80      	subs	r0, r0, r6
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484a:	e7a8      	b.n	800479e <_printf_i+0x152>
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	47d0      	blx	sl
 8004856:	3001      	adds	r0, #1
 8004858:	d0ab      	beq.n	80047b2 <_printf_i+0x166>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	079b      	lsls	r3, r3, #30
 800485e:	d413      	bmi.n	8004888 <_printf_i+0x23c>
 8004860:	68e0      	ldr	r0, [r4, #12]
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	4298      	cmp	r0, r3
 8004866:	bfb8      	it	lt
 8004868:	4618      	movlt	r0, r3
 800486a:	e7a4      	b.n	80047b6 <_printf_i+0x16a>
 800486c:	2301      	movs	r3, #1
 800486e:	4632      	mov	r2, r6
 8004870:	4649      	mov	r1, r9
 8004872:	4640      	mov	r0, r8
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d09b      	beq.n	80047b2 <_printf_i+0x166>
 800487a:	3501      	adds	r5, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	1a5b      	subs	r3, r3, r1
 8004882:	42ab      	cmp	r3, r5
 8004884:	dcf2      	bgt.n	800486c <_printf_i+0x220>
 8004886:	e7eb      	b.n	8004860 <_printf_i+0x214>
 8004888:	2500      	movs	r5, #0
 800488a:	f104 0619 	add.w	r6, r4, #25
 800488e:	e7f5      	b.n	800487c <_printf_i+0x230>
 8004890:	08004bb3 	.word	0x08004bb3
 8004894:	08004bc4 	.word	0x08004bc4

08004898 <memchr>:
 8004898:	4603      	mov	r3, r0
 800489a:	b510      	push	{r4, lr}
 800489c:	b2c9      	uxtb	r1, r1
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	d101      	bne.n	80048aa <memchr+0x12>
 80048a6:	2000      	movs	r0, #0
 80048a8:	e003      	b.n	80048b2 <memchr+0x1a>
 80048aa:	7804      	ldrb	r4, [r0, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	428c      	cmp	r4, r1
 80048b0:	d1f6      	bne.n	80048a0 <memchr+0x8>
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <memcpy>:
 80048b4:	440a      	add	r2, r1
 80048b6:	4291      	cmp	r1, r2
 80048b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048bc:	d100      	bne.n	80048c0 <memcpy+0xc>
 80048be:	4770      	bx	lr
 80048c0:	b510      	push	{r4, lr}
 80048c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048cc:	d1f9      	bne.n	80048c2 <memcpy+0xe>
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <memmove>:
 80048d0:	4288      	cmp	r0, r1
 80048d2:	b510      	push	{r4, lr}
 80048d4:	eb01 0402 	add.w	r4, r1, r2
 80048d8:	d902      	bls.n	80048e0 <memmove+0x10>
 80048da:	4284      	cmp	r4, r0
 80048dc:	4623      	mov	r3, r4
 80048de:	d807      	bhi.n	80048f0 <memmove+0x20>
 80048e0:	1e43      	subs	r3, r0, #1
 80048e2:	42a1      	cmp	r1, r4
 80048e4:	d008      	beq.n	80048f8 <memmove+0x28>
 80048e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ee:	e7f8      	b.n	80048e2 <memmove+0x12>
 80048f0:	4601      	mov	r1, r0
 80048f2:	4402      	add	r2, r0
 80048f4:	428a      	cmp	r2, r1
 80048f6:	d100      	bne.n	80048fa <memmove+0x2a>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004902:	e7f7      	b.n	80048f4 <memmove+0x24>

08004904 <_free_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	d043      	beq.n	8004994 <_free_r+0x90>
 800490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004910:	1f0c      	subs	r4, r1, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	18e4      	addlt	r4, r4, r3
 8004918:	f000 f8d0 	bl	8004abc <__malloc_lock>
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <_free_r+0x94>)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	4610      	mov	r0, r2
 8004922:	b933      	cbnz	r3, 8004932 <_free_r+0x2e>
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6014      	str	r4, [r2, #0]
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492e:	f000 b8cb 	b.w	8004ac8 <__malloc_unlock>
 8004932:	42a3      	cmp	r3, r4
 8004934:	d90a      	bls.n	800494c <_free_r+0x48>
 8004936:	6821      	ldr	r1, [r4, #0]
 8004938:	1862      	adds	r2, r4, r1
 800493a:	4293      	cmp	r3, r2
 800493c:	bf01      	itttt	eq
 800493e:	681a      	ldreq	r2, [r3, #0]
 8004940:	685b      	ldreq	r3, [r3, #4]
 8004942:	1852      	addeq	r2, r2, r1
 8004944:	6022      	streq	r2, [r4, #0]
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6004      	str	r4, [r0, #0]
 800494a:	e7ed      	b.n	8004928 <_free_r+0x24>
 800494c:	461a      	mov	r2, r3
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	b10b      	cbz	r3, 8004956 <_free_r+0x52>
 8004952:	42a3      	cmp	r3, r4
 8004954:	d9fa      	bls.n	800494c <_free_r+0x48>
 8004956:	6811      	ldr	r1, [r2, #0]
 8004958:	1850      	adds	r0, r2, r1
 800495a:	42a0      	cmp	r0, r4
 800495c:	d10b      	bne.n	8004976 <_free_r+0x72>
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	4401      	add	r1, r0
 8004962:	1850      	adds	r0, r2, r1
 8004964:	4283      	cmp	r3, r0
 8004966:	6011      	str	r1, [r2, #0]
 8004968:	d1de      	bne.n	8004928 <_free_r+0x24>
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4401      	add	r1, r0
 8004970:	6011      	str	r1, [r2, #0]
 8004972:	6053      	str	r3, [r2, #4]
 8004974:	e7d8      	b.n	8004928 <_free_r+0x24>
 8004976:	d902      	bls.n	800497e <_free_r+0x7a>
 8004978:	230c      	movs	r3, #12
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	e7d4      	b.n	8004928 <_free_r+0x24>
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	1821      	adds	r1, r4, r0
 8004982:	428b      	cmp	r3, r1
 8004984:	bf01      	itttt	eq
 8004986:	6819      	ldreq	r1, [r3, #0]
 8004988:	685b      	ldreq	r3, [r3, #4]
 800498a:	1809      	addeq	r1, r1, r0
 800498c:	6021      	streq	r1, [r4, #0]
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6054      	str	r4, [r2, #4]
 8004992:	e7c9      	b.n	8004928 <_free_r+0x24>
 8004994:	bd38      	pop	{r3, r4, r5, pc}
 8004996:	bf00      	nop
 8004998:	20000340 	.word	0x20000340

0800499c <_malloc_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	1ccd      	adds	r5, r1, #3
 80049a0:	f025 0503 	bic.w	r5, r5, #3
 80049a4:	3508      	adds	r5, #8
 80049a6:	2d0c      	cmp	r5, #12
 80049a8:	bf38      	it	cc
 80049aa:	250c      	movcc	r5, #12
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	4606      	mov	r6, r0
 80049b0:	db01      	blt.n	80049b6 <_malloc_r+0x1a>
 80049b2:	42a9      	cmp	r1, r5
 80049b4:	d903      	bls.n	80049be <_malloc_r+0x22>
 80049b6:	230c      	movs	r3, #12
 80049b8:	6033      	str	r3, [r6, #0]
 80049ba:	2000      	movs	r0, #0
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049be:	f000 f87d 	bl	8004abc <__malloc_lock>
 80049c2:	4921      	ldr	r1, [pc, #132]	; (8004a48 <_malloc_r+0xac>)
 80049c4:	680a      	ldr	r2, [r1, #0]
 80049c6:	4614      	mov	r4, r2
 80049c8:	b99c      	cbnz	r4, 80049f2 <_malloc_r+0x56>
 80049ca:	4f20      	ldr	r7, [pc, #128]	; (8004a4c <_malloc_r+0xb0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b923      	cbnz	r3, 80049da <_malloc_r+0x3e>
 80049d0:	4621      	mov	r1, r4
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f862 	bl	8004a9c <_sbrk_r>
 80049d8:	6038      	str	r0, [r7, #0]
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f85d 	bl	8004a9c <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d123      	bne.n	8004a2e <_malloc_r+0x92>
 80049e6:	230c      	movs	r3, #12
 80049e8:	4630      	mov	r0, r6
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	f000 f86c 	bl	8004ac8 <__malloc_unlock>
 80049f0:	e7e3      	b.n	80049ba <_malloc_r+0x1e>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	1b5b      	subs	r3, r3, r5
 80049f6:	d417      	bmi.n	8004a28 <_malloc_r+0x8c>
 80049f8:	2b0b      	cmp	r3, #11
 80049fa:	d903      	bls.n	8004a04 <_malloc_r+0x68>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	441c      	add	r4, r3
 8004a00:	6025      	str	r5, [r4, #0]
 8004a02:	e004      	b.n	8004a0e <_malloc_r+0x72>
 8004a04:	6863      	ldr	r3, [r4, #4]
 8004a06:	42a2      	cmp	r2, r4
 8004a08:	bf0c      	ite	eq
 8004a0a:	600b      	streq	r3, [r1, #0]
 8004a0c:	6053      	strne	r3, [r2, #4]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f85a 	bl	8004ac8 <__malloc_unlock>
 8004a14:	f104 000b 	add.w	r0, r4, #11
 8004a18:	1d23      	adds	r3, r4, #4
 8004a1a:	f020 0007 	bic.w	r0, r0, #7
 8004a1e:	1ac2      	subs	r2, r0, r3
 8004a20:	d0cc      	beq.n	80049bc <_malloc_r+0x20>
 8004a22:	1a1b      	subs	r3, r3, r0
 8004a24:	50a3      	str	r3, [r4, r2]
 8004a26:	e7c9      	b.n	80049bc <_malloc_r+0x20>
 8004a28:	4622      	mov	r2, r4
 8004a2a:	6864      	ldr	r4, [r4, #4]
 8004a2c:	e7cc      	b.n	80049c8 <_malloc_r+0x2c>
 8004a2e:	1cc4      	adds	r4, r0, #3
 8004a30:	f024 0403 	bic.w	r4, r4, #3
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d0e3      	beq.n	8004a00 <_malloc_r+0x64>
 8004a38:	1a21      	subs	r1, r4, r0
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f82e 	bl	8004a9c <_sbrk_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1dd      	bne.n	8004a00 <_malloc_r+0x64>
 8004a44:	e7cf      	b.n	80049e6 <_malloc_r+0x4a>
 8004a46:	bf00      	nop
 8004a48:	20000340 	.word	0x20000340
 8004a4c:	20000344 	.word	0x20000344

08004a50 <_realloc_r>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	4607      	mov	r7, r0
 8004a54:	4614      	mov	r4, r2
 8004a56:	460e      	mov	r6, r1
 8004a58:	b921      	cbnz	r1, 8004a64 <_realloc_r+0x14>
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a60:	f7ff bf9c 	b.w	800499c <_malloc_r>
 8004a64:	b922      	cbnz	r2, 8004a70 <_realloc_r+0x20>
 8004a66:	f7ff ff4d 	bl	8004904 <_free_r>
 8004a6a:	4625      	mov	r5, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a70:	f000 f830 	bl	8004ad4 <_malloc_usable_size_r>
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d20f      	bcs.n	8004a98 <_realloc_r+0x48>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ff8e 	bl	800499c <_malloc_r>
 8004a80:	4605      	mov	r5, r0
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0f2      	beq.n	8004a6c <_realloc_r+0x1c>
 8004a86:	4631      	mov	r1, r6
 8004a88:	4622      	mov	r2, r4
 8004a8a:	f7ff ff13 	bl	80048b4 <memcpy>
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4638      	mov	r0, r7
 8004a92:	f7ff ff37 	bl	8004904 <_free_r>
 8004a96:	e7e9      	b.n	8004a6c <_realloc_r+0x1c>
 8004a98:	4635      	mov	r5, r6
 8004a9a:	e7e7      	b.n	8004a6c <_realloc_r+0x1c>

08004a9c <_sbrk_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4d05      	ldr	r5, [pc, #20]	; (8004ab8 <_sbrk_r+0x1c>)
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fb fe98 	bl	80007dc <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_sbrk_r+0x1a>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_sbrk_r+0x1a>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000488 	.word	0x20000488

08004abc <__malloc_lock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__malloc_lock+0x8>)
 8004abe:	f000 b811 	b.w	8004ae4 <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000490 	.word	0x20000490

08004ac8 <__malloc_unlock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__malloc_unlock+0x8>)
 8004aca:	f000 b80c 	b.w	8004ae6 <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20000490 	.word	0x20000490

08004ad4 <_malloc_usable_size_r>:
 8004ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad8:	1f18      	subs	r0, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbc      	itt	lt
 8004ade:	580b      	ldrlt	r3, [r1, r0]
 8004ae0:	18c0      	addlt	r0, r0, r3
 8004ae2:	4770      	bx	lr

08004ae4 <__retarget_lock_acquire_recursive>:
 8004ae4:	4770      	bx	lr

08004ae6 <__retarget_lock_release_recursive>:
 8004ae6:	4770      	bx	lr

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
