
Project_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000499c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b80  08004b80  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b80  08004b80  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b80  08004b80  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000025c  08004de4  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004de4  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001079a  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002827  00000000  00000000  00030a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001826b  00000000  00000000  00034d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109bd  00000000  00000000  0004cf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3ed  00000000  00000000  0005d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  000e8d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000025c 	.word	0x2000025c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a90 	.word	0x08004a90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000260 	.word	0x20000260
 8000148:	08004a90 	.word	0x08004a90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <readKey>:
int MAX_KEY = 4;
int TimerForKeypress[20] = {200};
int flag_short[20] = {0};
int flag_long[20] = {0};

void readKey(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	Key[0] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin); //pedestrian
 8000160:	2101      	movs	r1, #1
 8000162:	4810      	ldr	r0, [pc, #64]	; (80001a4 <readKey+0x48>)
 8000164:	f001 fdf4 	bl	8001d50 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <readKey+0x4c>)
 800016e:	601a      	str	r2, [r3, #0]
	Key[1] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin); // mode
 8000170:	2102      	movs	r1, #2
 8000172:	480c      	ldr	r0, [pc, #48]	; (80001a4 <readKey+0x48>)
 8000174:	f001 fdec 	bl	8001d50 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <readKey+0x4c>)
 800017e:	605a      	str	r2, [r3, #4]
	Key[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin); //time
 8000180:	2110      	movs	r1, #16
 8000182:	4808      	ldr	r0, [pc, #32]	; (80001a4 <readKey+0x48>)
 8000184:	f001 fde4 	bl	8001d50 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <readKey+0x4c>)
 800018e:	609a      	str	r2, [r3, #8]
	Key[3] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin); //enter
 8000190:	2101      	movs	r1, #1
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <readKey+0x50>)
 8000194:	f001 fddc 	bl	8001d50 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	4b02      	ldr	r3, [pc, #8]	; (80001a8 <readKey+0x4c>)
 800019e:	60da      	str	r2, [r3, #12]
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010800 	.word	0x40010800
 80001a8:	20000140 	.word	0x20000140
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <getKeyInput>:
void getKeyInput(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
	readKey();
 80001b6:	f7ff ffd1 	bl	800015c <readKey>
	for(int i = 0; i < MAX_KEY; i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e07d      	b.n	80002bc <getKeyInput+0x10c>
		Keyred0[i] = Keyred1[i];
 80001c0:	4a44      	ldr	r2, [pc, #272]	; (80002d4 <getKeyInput+0x124>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	4943      	ldr	r1, [pc, #268]	; (80002d8 <getKeyInput+0x128>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Keyred1[i] = Keyred2[i];
 80001d0:	4a42      	ldr	r2, [pc, #264]	; (80002dc <getKeyInput+0x12c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	493e      	ldr	r1, [pc, #248]	; (80002d4 <getKeyInput+0x124>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Keyred2[i] = Key[i];
 80001e0:	4a3f      	ldr	r2, [pc, #252]	; (80002e0 <getKeyInput+0x130>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	493c      	ldr	r1, [pc, #240]	; (80002dc <getKeyInput+0x12c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if((Keyred0[i] == Keyred1[i]) && (Keyred1[i] == Keyred2[i])){
 80001f0:	4a39      	ldr	r2, [pc, #228]	; (80002d8 <getKeyInput+0x128>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4936      	ldr	r1, [pc, #216]	; (80002d4 <getKeyInput+0x124>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d14c      	bne.n	800029e <getKeyInput+0xee>
 8000204:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <getKeyInput+0x124>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4933      	ldr	r1, [pc, #204]	; (80002dc <getKeyInput+0x12c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d142      	bne.n	800029e <getKeyInput+0xee>
			if(Keyred3[i] != Keyred2[i]){
 8000218:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <getKeyInput+0x134>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492e      	ldr	r1, [pc, #184]	; (80002dc <getKeyInput+0x12c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d018      	beq.n	800025e <getKeyInput+0xae>
				Keyred3[i] = Keyred2[i];
 800022c:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492b      	ldr	r1, [pc, #172]	; (80002e4 <getKeyInput+0x134>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(Keyred2[i] == PRESS_STATE){
 800023c:	4a27      	ldr	r2, [pc, #156]	; (80002dc <getKeyInput+0x12c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d135      	bne.n	80002b4 <getKeyInput+0x104>
					//TODO
					flag_short[i] = 1;
 8000248:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <getKeyInput+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2101      	movs	r1, #1
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeypress[i] = 200;
 8000252:	4a26      	ldr	r2, [pc, #152]	; (80002ec <getKeyInput+0x13c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	21c8      	movs	r1, #200	; 0xc8
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(Keyred3[i] != Keyred2[i]){
 800025c:	e02a      	b.n	80002b4 <getKeyInput+0x104>
				}
			}else{
				TimerForKeypress[i]--;
 800025e:	4a23      	ldr	r2, [pc, #140]	; (80002ec <getKeyInput+0x13c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	1e5a      	subs	r2, r3, #1
 8000268:	4920      	ldr	r1, [pc, #128]	; (80002ec <getKeyInput+0x13c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeypress[i] == 0){
 8000270:	4a1e      	ldr	r2, [pc, #120]	; (80002ec <getKeyInput+0x13c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11b      	bne.n	80002b4 <getKeyInput+0x104>
					if(Keyred2[i] == PRESS_STATE){
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <getKeyInput+0x12c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d104      	bne.n	8000292 <getKeyInput+0xe2>
						//TODO
						flag_long[i] = 1;
 8000288:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <getKeyInput+0x140>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					TimerForKeypress[i] = 200;
 8000292:	4a16      	ldr	r2, [pc, #88]	; (80002ec <getKeyInput+0x13c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	21c8      	movs	r1, #200	; 0xc8
 8000298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(Keyred3[i] != Keyred2[i]){
 800029c:	e00a      	b.n	80002b4 <getKeyInput+0x104>
				}
			}
		}else{
			flag_long[i] = 0;
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <getKeyInput+0x140>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2100      	movs	r1, #0
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_short[i] = 0;
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <getKeyInput+0x138>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2100      	movs	r1, #0
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002b2:	e000      	b.n	80002b6 <getKeyInput+0x106>
			if(Keyred3[i] != Keyred2[i]){
 80002b4:	bf00      	nop
	for(int i = 0; i < MAX_KEY; i++){
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <getKeyInput+0x144>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f6ff af7c 	blt.w	80001c0 <getKeyInput+0x10>
		}
	}
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000050 	.word	0x20000050
 80002d8:	20000000 	.word	0x20000000
 80002dc:	200000a0 	.word	0x200000a0
 80002e0:	20000140 	.word	0x20000140
 80002e4:	200000f0 	.word	0x200000f0
 80002e8:	20000278 	.word	0x20000278
 80002ec:	20000194 	.word	0x20000194
 80002f0:	200002c8 	.word	0x200002c8
 80002f4:	20000190 	.word	0x20000190

080002f8 <isButtonPedes>:

int isButtonPedes(){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	if(flag_short[0]){
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <isButtonPedes+0x20>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d004      	beq.n	800030e <isButtonPedes+0x16>
		flag_short[0] = 0;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <isButtonPedes+0x20>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
		return 1;
 800030a:	2301      	movs	r3, #1
 800030c:	e000      	b.n	8000310 <isButtonPedes+0x18>
	}
		return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000278 	.word	0x20000278

0800031c <isButtonMode>:

int isButtonMode(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	if(flag_short[1]){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <isButtonMode+0x20>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d004      	beq.n	8000332 <isButtonMode+0x16>
		flag_short[1] = 0;
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <isButtonMode+0x20>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
		return 1;
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <isButtonMode+0x18>
	}
		return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000278 	.word	0x20000278

08000340 <isModeLongPress>:

int isModeLongPress(){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	if(flag_long[1]){
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <isModeLongPress+0x20>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d004      	beq.n	8000356 <isModeLongPress+0x16>
		flag_long[1] = 0;
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <isModeLongPress+0x20>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isModeLongPress+0x18>
	}
		return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	200002c8 	.word	0x200002c8

08000364 <isButtonTime>:

int isButtonTime(){
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	if(flag_short[2]){
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <isButtonTime+0x20>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <isButtonTime+0x16>
		flag_short[2] = 0;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <isButtonTime+0x20>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
		return 1;
 8000376:	2301      	movs	r3, #1
 8000378:	e000      	b.n	800037c <isButtonTime+0x18>
	}
		return 0;
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000278 	.word	0x20000278

08000388 <isButtonEnter>:

int isButtonEnter(){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	if(flag_short[3]){
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <isButtonEnter+0x20>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d004      	beq.n	800039e <isButtonEnter+0x16>
		flag_short[3] = 0;
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <isButtonEnter+0x20>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
		return 1;
 800039a:	2301      	movs	r3, #1
 800039c:	e000      	b.n	80003a0 <isButtonEnter+0x18>
	}
		return 0;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000278 	.word	0x20000278

080003ac <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003b0:	2100      	movs	r1, #0
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <buzzer_init+0x10>)
 80003b4:	f002 fa1c 	bl	80027f0 <HAL_TIM_PWM_Start>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000348 	.word	0x20000348

080003c0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <buzzer_SetVolume+0x24>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,duty_cycle);
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <buzzer_SetVolume+0x24>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <buzzer_SetVolume+0x28>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000318 	.word	0x20000318
 80003e8:	20000348 	.word	0x20000348

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <MX_GPIO_Init+0x110>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <MX_GPIO_Init+0x110>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <MX_GPIO_Init+0x110>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <MX_GPIO_Init+0x110>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a37      	ldr	r2, [pc, #220]	; (80004fc <MX_GPIO_Init+0x110>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <MX_GPIO_Init+0x110>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b32      	ldr	r3, [pc, #200]	; (80004fc <MX_GPIO_Init+0x110>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a31      	ldr	r2, [pc, #196]	; (80004fc <MX_GPIO_Init+0x110>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <MX_GPIO_Init+0x110>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800044e:	482c      	ldr	r0, [pc, #176]	; (8000500 <MX_GPIO_Init+0x114>)
 8000450:	f001 fc95 	bl	8001d7e <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	482a      	ldr	r0, [pc, #168]	; (8000504 <MX_GPIO_Init+0x118>)
 800045a:	f001 fc90 	bl	8001d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D8_Pin|D2_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000464:	4828      	ldr	r0, [pc, #160]	; (8000508 <MX_GPIO_Init+0x11c>)
 8000466:	f001 fc8a 	bl	8001d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 800046a:	2313      	movs	r3, #19
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4822      	ldr	r0, [pc, #136]	; (8000508 <MX_GPIO_Init+0x11c>)
 800047e:	f001 fae3 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000482:	2301      	movs	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	481a      	ldr	r0, [pc, #104]	; (8000500 <MX_GPIO_Init+0x114>)
 8000496:	f001 fad7 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 800049a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800049e:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4813      	ldr	r0, [pc, #76]	; (8000500 <MX_GPIO_Init+0x114>)
 80004b4:	f001 fac8 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D9_Pin;
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_GPIO_Init+0x118>)
 80004d0:	f001 faba 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin|D2_Pin;
 80004d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_GPIO_Init+0x11c>)
 80004ee:	f001 faab 	bl	8001a48 <HAL_GPIO_Init>

}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010c00 	.word	0x40010c00
 8000504:	40011000 	.word	0x40011000
 8000508:	40010800 	.word	0x40010800

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 f878 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f822 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f7ff ff68 	bl	80003ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800051c:	f000 f984 	bl	8000828 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000520:	f000 f9d0 	bl	80008c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000524:	f000 ffcc 	bl	80014c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  buzzer_init();
 8000528:	f7ff ff40 	bl	80003ac <buzzer_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <main+0x44>)
 800052e:	f002 f8b5 	bl	800269c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp_start, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <main+0x48>)
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x4c>)
 8000538:	f003 f899 	bl	800366e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 f85f 	bl	8000600 <setTimer1>
  setTimer2(50);
 8000542:	2032      	movs	r0, #50	; 0x32
 8000544:	f000 f870 	bl	8000628 <setTimer2>
  while (1)
  {
//	  test_IO();
	  traffic_light();
 8000548:	f000 fed6 	bl	80012f8 <traffic_light>
  {
 800054c:	e7fc      	b.n	8000548 <main+0x3c>
 800054e:	bf00      	nop
 8000550:	20000390 	.word	0x20000390
 8000554:	20000319 	.word	0x20000319
 8000558:	2000043c 	.word	0x2000043c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b090      	sub	sp, #64	; 0x40
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2228      	movs	r2, #40	; 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fe4e 	bl	800420c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800058e:	2300      	movs	r3, #0
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000592:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fc1f 	bl	8001de0 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005a8:	f000 f825 	bl	80005f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fe8a 	bl	80022e0 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005d2:	f000 f810 	bl	80005f6 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3740      	adds	r7, #64	; 0x40
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	timerRun();
 80005e6:	f000 f833 	bl	8000650 <timerRun>
	getKeyInput();
 80005ea:	f7ff fde1 	bl	80001b0 <getKeyInput>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fa:	b672      	cpsid	i
}
 80005fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fe:	e7fe      	b.n	80005fe <Error_Handler+0x8>

08000600 <setTimer1>:
int timer2_flag=0;

int timer3_counter=0;
int timer3_flag=0;

void setTimer1(int duration){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <setTimer1+0x20>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <setTimer1+0x24>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000031c 	.word	0x2000031c
 8000624:	20000320 	.word	0x20000320

08000628 <setTimer2>:

void setTimer2(int duration){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <setTimer2+0x20>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <setTimer2+0x24>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000324 	.word	0x20000324
 800064c:	20000328 	.word	0x20000328

08000650 <timerRun>:
void setTimer3(int duration){
	timer3_counter=duration;
	timer3_flag=0;
}

void timerRun(){
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <timerRun+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd0b      	ble.n	8000674 <timerRun+0x24>
		timer1_counter--;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <timerRun+0x6c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <timerRun+0x6c>)
 8000664:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <timerRun+0x6c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dc02      	bgt.n	8000674 <timerRun+0x24>
			timer1_flag=1;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <timerRun+0x70>)
 8000670:	2201      	movs	r2, #1
 8000672:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <timerRun+0x74>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	dd0b      	ble.n	8000694 <timerRun+0x44>
		timer2_counter--;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <timerRun+0x74>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <timerRun+0x74>)
 8000684:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <timerRun+0x74>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	dc02      	bgt.n	8000694 <timerRun+0x44>
			timer2_flag=1;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <timerRun+0x78>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <timerRun+0x7c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dd0b      	ble.n	80006b4 <timerRun+0x64>
			timer3_counter--;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <timerRun+0x7c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <timerRun+0x7c>)
 80006a4:	6013      	str	r3, [r2, #0]
			if(timer3_counter<=0){
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <timerRun+0x7c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dc02      	bgt.n	80006b4 <timerRun+0x64>
				timer3_flag=1;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <timerRun+0x80>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
			}
		}
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	2000031c 	.word	0x2000031c
 80006c0:	20000320 	.word	0x20000320
 80006c4:	20000324 	.word	0x20000324
 80006c8:	20000328 	.word	0x20000328
 80006cc:	2000032c 	.word	0x2000032c
 80006d0:	20000330 	.word	0x20000330

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_MspInit+0x60>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_MspInit+0x60>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 ff87 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <TIM2_IRQHandler+0x10>)
 800078e:	f002 f8d1 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000390 	.word	0x20000390

0800079c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <USART2_IRQHandler+0x10>)
 80007a2:	f002 ff89 	bl	80036b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000043c 	.word	0x2000043c

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f003 fcea 	bl	80041b8 <__errno>
 80007e4:	4603      	mov	r3, r0
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20005000 	.word	0x20005000
 8000810:	00000400 	.word	0x00000400
 8000814:	20000334 	.word	0x20000334
 8000818:	20000498 	.word	0x20000498

0800081c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0x98>)
 800084e:	f240 227f 	movw	r2, #639	; 0x27f
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_TIM2_Init+0x98>)
 800085c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000870:	f001 fec4 	bl	80025fc <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087a:	f7ff febc 	bl	80005f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x98>)
 800088c:	f002 fa1c 	bl	8002cc8 <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000896:	f7ff feae 	bl	80005f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0x98>)
 80008a8:	f002 fd9e 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f7ff fea0 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000390 	.word	0x20000390

080008c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_TIM3_Init+0xe4>)
 80008f6:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <MX_TIM3_Init+0xe8>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_TIM3_Init+0xe4>)
 80008fc:	223f      	movs	r2, #63	; 0x3f
 80008fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000908:	2263      	movs	r2, #99	; 0x63
 800090a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_TIM3_Init+0xe4>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000918:	4823      	ldr	r0, [pc, #140]	; (80009a8 <MX_TIM3_Init+0xe4>)
 800091a:	f001 fe6f 	bl	80025fc <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000924:	f7ff fe67 	bl	80005f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	4619      	mov	r1, r3
 8000934:	481c      	ldr	r0, [pc, #112]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000936:	f002 f9c7 	bl	8002cc8 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000940:	f7ff fe59 	bl	80005f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000946:	f001 fefb 	bl	8002740 <HAL_TIM_PWM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000950:	f7ff fe51 	bl	80005f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4619      	mov	r1, r3
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_TIM3_Init+0xe4>)
 8000964:	f002 fd40 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800096e:	f7ff fe42 	bl	80005f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000972:	2360      	movs	r3, #96	; 0x60
 8000974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_TIM3_Init+0xe4>)
 800098a:	f002 f8db 	bl	8002b44 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000994:	f7ff fe2f 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <MX_TIM3_Init+0xe4>)
 800099a:	f000 f841 	bl	8000a20 <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3738      	adds	r7, #56	; 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000348 	.word	0x20000348
 80009ac:	40000400 	.word	0x40000400

080009b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c0:	d114      	bne.n	80009ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	201c      	movs	r0, #28
 80009e0:	f000 ff49 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e4:	201c      	movs	r0, #28
 80009e6:	f000 ff62 	bl	80018ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009ea:	e010      	b.n	8000a0e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_TIM_Base_MspInit+0x6c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10b      	bne.n	8000a0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_TIM_Base_MspInit+0x68>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40000400 	.word	0x40000400

08000a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_TIM_MspPostInit+0x58>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d117      	bne.n	8000a70 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_TIM_MspPostInit+0x5c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_TIM_MspPostInit+0x5c>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_TIM_MspPostInit+0x5c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_TIM_MspPostInit+0x60>)
 8000a6c:	f000 ffec 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800

08000a84 <Phase1_GreenOn>:
uint8_t count_tuning = 20;
uint8_t flag_color = 0;

uint8_t status_traffic  = AUTOMATIC;

void Phase1_GreenOn(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <Phase1_GreenOn+0x28>)
 8000a90:	f001 f975 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <Phase1_GreenOn+0x2c>)
 8000a9a:	f001 f970 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <Phase1_GreenOn+0x2c>)
 8000aa4:	f001 f96b 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <Phase1_RedOn>:
void Phase1_RedOn(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <Phase1_RedOn+0x28>)
 8000ac0:	f001 f95d 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <Phase1_RedOn+0x2c>)
 8000aca:	f001 f958 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <Phase1_RedOn+0x2c>)
 8000ad4:	f001 f953 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <Phase1_YellowOn>:
void Phase1_YellowOn(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <Phase1_YellowOn+0x28>)
 8000af0:	f001 f945 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2108      	movs	r1, #8
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <Phase1_YellowOn+0x2c>)
 8000afa:	f001 f940 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <Phase1_YellowOn+0x2c>)
 8000b04:	f001 f93b 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <Phase2_GreenOn>:

void Phase2_GreenOn(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <Phase2_GreenOn+0x2c>)
 8000b1e:	f001 f92e 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <Phase2_GreenOn+0x2c>)
 8000b2a:	f001 f928 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <Phase2_GreenOn+0x30>)
 8000b36:	f001 f922 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	40010800 	.word	0x40010800

08000b48 <Phase2_RedOn>:
void Phase2_RedOn(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <Phase2_RedOn+0x2c>)
 8000b52:	f001 f914 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <Phase2_RedOn+0x2c>)
 8000b5e:	f001 f90e 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <Phase2_RedOn+0x30>)
 8000b6a:	f001 f908 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40010800 	.word	0x40010800

08000b7c <Phase2_YellowOn>:
void Phase2_YellowOn(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <Phase2_YellowOn+0x2c>)
 8000b86:	f001 f8fa 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <Phase2_YellowOn+0x2c>)
 8000b92:	f001 f8f4 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Phase2_YellowOn+0x30>)
 8000b9e:	f001 f8ee 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40010800 	.word	0x40010800

08000bb0 <Pedes_GreenOn>:

void Pedes_GreenOn(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <Pedes_GreenOn+0x28>)
 8000bbc:	f001 f8df 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <Pedes_GreenOn+0x2c>)
 8000bc6:	f001 f8da 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <Pedes_GreenOn+0x30>)
 8000bd0:	f001 f8d5 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <Pedes_RedOn>:
void Pedes_RedOn(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <Pedes_RedOn+0x28>)
 8000bf0:	f001 f8c5 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <Pedes_RedOn+0x2c>)
 8000bfa:	f001 f8c0 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <Pedes_RedOn+0x30>)
 8000c04:	f001 f8bb 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010800 	.word	0x40010800
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <Pedes_YellowOn>:
void Pedes_YellowOn(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <Pedes_YellowOn+0x28>)
 8000c24:	f001 f8ab 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <Pedes_YellowOn+0x2c>)
 8000c2e:	f001 f8a6 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <Pedes_YellowOn+0x30>)
 8000c38:	f001 f8a1 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <Pedes_Off>:

void Pedes_Off(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <Pedes_Off+0x28>)
 8000c58:	f001 f891 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <Pedes_Off+0x2c>)
 8000c62:	f001 f88c 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <Pedes_Off+0x30>)
 8000c6c:	f001 f887 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <Blink_Green>:
void Blink_Green(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <Blink_Green+0x48>)
 8000c8c:	f001 f877 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2108      	movs	r1, #8
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <Blink_Green+0x4c>)
 8000c96:	f001 f872 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <Blink_Green+0x4c>)
 8000c9e:	f001 f886 	bl	8001dae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <Blink_Green+0x4c>)
 8000ca8:	f001 f869 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <Blink_Green+0x4c>)
 8000cb4:	f001 f863 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8000cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <Blink_Green+0x48>)
 8000cbe:	f001 f876 	bl	8001dae <HAL_GPIO_TogglePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <Blink_Red>:
void Blink_Red(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <Blink_Red+0x48>)
 8000cda:	f001 f868 	bl	8001dae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <Blink_Red+0x4c>)
 8000ce4:	f001 f84b 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2120      	movs	r1, #32
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <Blink_Red+0x4c>)
 8000cee:	f001 f846 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <Blink_Red+0x4c>)
 8000cf6:	f001 f85a 	bl	8001dae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <Blink_Red+0x4c>)
 8000d02:	f001 f83c 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <Blink_Red+0x48>)
 8000d0e:	f001 f836 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <Blink_Yellow>:
void Blink_Yellow(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2a:	480f      	ldr	r0, [pc, #60]	; (8000d68 <Blink_Yellow+0x48>)
 8000d2c:	f001 f827 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000d30:	2108      	movs	r1, #8
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <Blink_Yellow+0x4c>)
 8000d34:	f001 f83b 	bl	8001dae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <Blink_Yellow+0x4c>)
 8000d3e:	f001 f81e 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2110      	movs	r1, #16
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <Blink_Yellow+0x4c>)
 8000d48:	f001 f819 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <Blink_Yellow+0x4c>)
 8000d52:	f001 f82c 	bl	8001dae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <Blink_Yellow+0x48>)
 8000d5e:	f001 f80e 	bl	8001d7e <HAL_GPIO_WritePin>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <normal_trafic>:


void normal_trafic(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	switch (status_automation){
 8000d74:	4b84      	ldr	r3, [pc, #528]	; (8000f88 <normal_trafic+0x218>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3b64      	subs	r3, #100	; 0x64
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	f200 80f3 	bhi.w	8000f66 <normal_trafic+0x1f6>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <normal_trafic+0x18>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000d9d 	.word	0x08000d9d
 8000d8c:	08000dbd 	.word	0x08000dbd
 8000d90:	08000e2b 	.word	0x08000e2b
 8000d94:	08000e95 	.word	0x08000e95
 8000d98:	08000efd 	.word	0x08000efd
	case INIT:
		counter_normal = count_green;
 8000d9c:	4b7b      	ldr	r3, [pc, #492]	; (8000f8c <normal_trafic+0x21c>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <normal_trafic+0x220>)
 8000da2:	701a      	strb	r2, [r3, #0]
		num1 = count_red;
 8000da4:	4b7b      	ldr	r3, [pc, #492]	; (8000f94 <normal_trafic+0x224>)
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b7b      	ldr	r3, [pc, #492]	; (8000f98 <normal_trafic+0x228>)
 8000daa:	701a      	strb	r2, [r3, #0]
		num2 = count_green;
 8000dac:	4b77      	ldr	r3, [pc, #476]	; (8000f8c <normal_trafic+0x21c>)
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <normal_trafic+0x22c>)
 8000db2:	701a      	strb	r2, [r3, #0]
		status_automation = PHASE_2_GREEN;
 8000db4:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <normal_trafic+0x218>)
 8000db6:	2265      	movs	r2, #101	; 0x65
 8000db8:	701a      	strb	r2, [r3, #0]
		break;
 8000dba:	e0d8      	b.n	8000f6e <normal_trafic+0x1fe>
	case PHASE_2_GREEN:
		counter_normal--;
 8000dbc:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <normal_trafic+0x220>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b72      	ldr	r3, [pc, #456]	; (8000f90 <normal_trafic+0x220>)
 8000dc6:	701a      	strb	r2, [r3, #0]
		Phase2_GreenOn();
 8000dc8:	f7ff fea4 	bl	8000b14 <Phase2_GreenOn>
		Phase1_RedOn();
 8000dcc:	f7ff fe72 	bl	8000ab4 <Phase1_RedOn>
		flag_color = TUNING_GREEN;
 8000dd0:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <normal_trafic+0x230>)
 8000dd2:	220b      	movs	r2, #11
 8000dd4:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0){
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <normal_trafic+0x220>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d118      	bne.n	8000e10 <normal_trafic+0xa0>
			counter_normal = count_yellow;
 8000dde:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <normal_trafic+0x234>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b6b      	ldr	r3, [pc, #428]	; (8000f90 <normal_trafic+0x220>)
 8000de4:	701a      	strb	r2, [r3, #0]
			num1--;
 8000de6:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <normal_trafic+0x228>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b6a      	ldr	r3, [pc, #424]	; (8000f98 <normal_trafic+0x228>)
 8000df0:	701a      	strb	r2, [r3, #0]
			num2 = count_yellow;
 8000df2:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <normal_trafic+0x234>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <normal_trafic+0x22c>)
 8000df8:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_2_YELLOW;
 8000dfa:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <normal_trafic+0x218>)
 8000dfc:	2266      	movs	r2, #102	; 0x66
 8000dfe:	701a      	strb	r2, [r3, #0]
			Phase2_YellowOn();
 8000e00:	f7ff febc 	bl	8000b7c <Phase2_YellowOn>
			Phase1_RedOn();
 8000e04:	f7ff fe56 	bl	8000ab4 <Phase1_RedOn>
			flag_color = TUNING_YELLOW;
 8000e08:	4b65      	ldr	r3, [pc, #404]	; (8000fa0 <normal_trafic+0x230>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
		break;
 8000e0e:	e0ae      	b.n	8000f6e <normal_trafic+0x1fe>
			num1--;
 8000e10:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <normal_trafic+0x228>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <normal_trafic+0x228>)
 8000e1a:	701a      	strb	r2, [r3, #0]
			num2--;
 8000e1c:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <normal_trafic+0x22c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <normal_trafic+0x22c>)
 8000e26:	701a      	strb	r2, [r3, #0]
		break;
 8000e28:	e0a1      	b.n	8000f6e <normal_trafic+0x1fe>
	case PHASE_2_YELLOW:
		counter_normal--;
 8000e2a:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <normal_trafic+0x220>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <normal_trafic+0x220>)
 8000e34:	701a      	strb	r2, [r3, #0]
		Phase2_YellowOn();
 8000e36:	f7ff fea1 	bl	8000b7c <Phase2_YellowOn>
		Phase1_RedOn();
 8000e3a:	f7ff fe3b 	bl	8000ab4 <Phase1_RedOn>
		flag_color = TUNING_YELLOW;
 8000e3e:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <normal_trafic+0x230>)
 8000e40:	220c      	movs	r2, #12
 8000e42:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <normal_trafic+0x220>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d116      	bne.n	8000e7a <normal_trafic+0x10a>
			counter_normal = count_green;
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <normal_trafic+0x21c>)
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <normal_trafic+0x220>)
 8000e52:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_1_GREEN;
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <normal_trafic+0x218>)
 8000e56:	2267      	movs	r2, #103	; 0x67
 8000e58:	701a      	strb	r2, [r3, #0]
			num1 = count_green;
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <normal_trafic+0x21c>)
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <normal_trafic+0x228>)
 8000e60:	701a      	strb	r2, [r3, #0]
			num2 = count_red;
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <normal_trafic+0x224>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <normal_trafic+0x22c>)
 8000e68:	701a      	strb	r2, [r3, #0]
			Phase1_GreenOn();
 8000e6a:	f7ff fe0b 	bl	8000a84 <Phase1_GreenOn>
			Phase2_RedOn();
 8000e6e:	f7ff fe6b 	bl	8000b48 <Phase2_RedOn>
			flag_color = TUNING_RED;
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <normal_trafic+0x230>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000e78:	e079      	b.n	8000f6e <normal_trafic+0x1fe>
			num1--;
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <normal_trafic+0x228>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <normal_trafic+0x228>)
 8000e84:	701a      	strb	r2, [r3, #0]
			num2--;
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <normal_trafic+0x22c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <normal_trafic+0x22c>)
 8000e90:	701a      	strb	r2, [r3, #0]
	break;
 8000e92:	e06c      	b.n	8000f6e <normal_trafic+0x1fe>
	case PHASE_1_GREEN:
		counter_normal--;
 8000e94:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <normal_trafic+0x220>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <normal_trafic+0x220>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		Phase1_GreenOn();
 8000ea0:	f7ff fdf0 	bl	8000a84 <Phase1_GreenOn>
		Phase2_RedOn();
 8000ea4:	f7ff fe50 	bl	8000b48 <Phase2_RedOn>
		flag_color = TUNING_RED;
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <normal_trafic+0x230>)
 8000eaa:	220a      	movs	r2, #10
 8000eac:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <normal_trafic+0x220>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d115      	bne.n	8000ee2 <normal_trafic+0x172>
			counter_normal = count_yellow;
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <normal_trafic+0x234>)
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <normal_trafic+0x220>)
 8000ebc:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_1_YELLOW;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <normal_trafic+0x218>)
 8000ec0:	2268      	movs	r2, #104	; 0x68
 8000ec2:	701a      	strb	r2, [r3, #0]
			num1 = count_yellow;
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <normal_trafic+0x234>)
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <normal_trafic+0x228>)
 8000eca:	701a      	strb	r2, [r3, #0]
			num2--;
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <normal_trafic+0x22c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <normal_trafic+0x22c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
			Phase1_YellowOn();
 8000ed8:	f7ff fe04 	bl	8000ae4 <Phase1_YellowOn>
			Phase2_RedOn();
 8000edc:	f7ff fe34 	bl	8000b48 <Phase2_RedOn>
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000ee0:	e045      	b.n	8000f6e <normal_trafic+0x1fe>
			num1--;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <normal_trafic+0x228>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <normal_trafic+0x228>)
 8000eec:	701a      	strb	r2, [r3, #0]
			num2--;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <normal_trafic+0x22c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <normal_trafic+0x22c>)
 8000ef8:	701a      	strb	r2, [r3, #0]
	break;
 8000efa:	e038      	b.n	8000f6e <normal_trafic+0x1fe>
	case PHASE_1_YELLOW:
		counter_normal--;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <normal_trafic+0x220>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <normal_trafic+0x220>)
 8000f06:	701a      	strb	r2, [r3, #0]
		Phase1_YellowOn();
 8000f08:	f7ff fdec 	bl	8000ae4 <Phase1_YellowOn>
		Phase2_RedOn();
 8000f0c:	f7ff fe1c 	bl	8000b48 <Phase2_RedOn>
		flag_color = TUNING_RED;
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <normal_trafic+0x230>)
 8000f12:	220a      	movs	r2, #10
 8000f14:	701a      	strb	r2, [r3, #0]
		if (counter_normal <= 0) {
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <normal_trafic+0x220>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <normal_trafic+0x1dc>
			counter_normal = count_green;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <normal_trafic+0x21c>)
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <normal_trafic+0x220>)
 8000f24:	701a      	strb	r2, [r3, #0]
			status_automation = PHASE_2_GREEN;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <normal_trafic+0x218>)
 8000f28:	2265      	movs	r2, #101	; 0x65
 8000f2a:	701a      	strb	r2, [r3, #0]
			num1 = count_red;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <normal_trafic+0x224>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <normal_trafic+0x228>)
 8000f32:	701a      	strb	r2, [r3, #0]
			num2 = count_green;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <normal_trafic+0x21c>)
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <normal_trafic+0x22c>)
 8000f3a:	701a      	strb	r2, [r3, #0]
			Phase2_GreenOn();
 8000f3c:	f7ff fdea 	bl	8000b14 <Phase2_GreenOn>
			Phase1_RedOn();
 8000f40:	f7ff fdb8 	bl	8000ab4 <Phase1_RedOn>
			flag_color = TUNING_GREEN;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <normal_trafic+0x230>)
 8000f46:	220b      	movs	r2, #11
 8000f48:	701a      	strb	r2, [r3, #0]
		}
		else{
			num1--;
			num2--;
		}
	break;
 8000f4a:	e010      	b.n	8000f6e <normal_trafic+0x1fe>
			num1--;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <normal_trafic+0x228>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <normal_trafic+0x228>)
 8000f56:	701a      	strb	r2, [r3, #0]
			num2--;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <normal_trafic+0x22c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <normal_trafic+0x22c>)
 8000f62:	701a      	strb	r2, [r3, #0]
	break;
 8000f64:	e003      	b.n	8000f6e <normal_trafic+0x1fe>
	default:
		status_automation = INIT;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <normal_trafic+0x218>)
 8000f68:	2264      	movs	r2, #100	; 0x64
 8000f6a:	701a      	strb	r2, [r3, #0]
		break;
 8000f6c:	bf00      	nop
	}
	if(flag_tuning){
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <normal_trafic+0x238>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <normal_trafic+0x212>
		count_tuning--;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <normal_trafic+0x23c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <normal_trafic+0x23c>)
 8000f80:	701a      	strb	r2, [r3, #0]
	}
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001e8 	.word	0x200001e8
 8000f8c:	200001eb 	.word	0x200001eb
 8000f90:	20000338 	.word	0x20000338
 8000f94:	200001e9 	.word	0x200001e9
 8000f98:	20000339 	.word	0x20000339
 8000f9c:	2000033a 	.word	0x2000033a
 8000fa0:	2000033d 	.word	0x2000033d
 8000fa4:	200001ea 	.word	0x200001ea
 8000fa8:	2000033c 	.word	0x2000033c
 8000fac:	200001ed 	.word	0x200001ed

08000fb0 <manual_trafic>:

void manual_trafic(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	switch (status_manual){
 8000fb4:	4b8d      	ldr	r3, [pc, #564]	; (80011ec <manual_trafic+0x23c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	f200 810b 	bhi.w	80011d6 <manual_trafic+0x226>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <manual_trafic+0x18>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000fd9 	.word	0x08000fd9
 8000fcc:	08000fe7 	.word	0x08000fe7
 8000fd0:	0800108d 	.word	0x0800108d
 8000fd4:	08001133 	.word	0x08001133
	case MANUAL_INIT:
		status_manual = MANUAL_RED;
 8000fd8:	4b84      	ldr	r3, [pc, #528]	; (80011ec <manual_trafic+0x23c>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	701a      	strb	r2, [r3, #0]
		count_buffer = count_red;
 8000fde:	4b84      	ldr	r3, [pc, #528]	; (80011f0 <manual_trafic+0x240>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b84      	ldr	r3, [pc, #528]	; (80011f4 <manual_trafic+0x244>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	case MANUAL_RED:
		if(timer2_flag){
 8000fe6:	4b84      	ldr	r3, [pc, #528]	; (80011f8 <manual_trafic+0x248>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <manual_trafic+0x48>
			setTimer2(50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f7ff fb1a 	bl	8000628 <setTimer2>
			Blink_Red();
 8000ff4:	f7ff fe6c 	bl	8000cd0 <Blink_Red>
		}
		if(isButtonMode()){
 8000ff8:	f7ff f990 	bl	800031c <isButtonMode>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <manual_trafic+0x60>
			status_manual = MANUAL_YELLOW;
 8001002:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <manual_trafic+0x23c>)
 8001004:	2203      	movs	r2, #3
 8001006:	701a      	strb	r2, [r3, #0]
			count_buffer = count_yellow;
 8001008:	4b7c      	ldr	r3, [pc, #496]	; (80011fc <manual_trafic+0x24c>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b79      	ldr	r3, [pc, #484]	; (80011f4 <manual_trafic+0x244>)
 800100e:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 8001010:	f7ff f9a8 	bl	8000364 <isButtonTime>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <manual_trafic+0x76>
			count_buffer++;
 800101a:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <manual_trafic+0x244>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b74      	ldr	r3, [pc, #464]	; (80011f4 <manual_trafic+0x244>)
 8001024:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 8001026:	f7ff f9af 	bl	8000388 <isButtonEnter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80d6 	beq.w	80011de <manual_trafic+0x22e>
			count_red = count_buffer;
 8001032:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <manual_trafic+0x244>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <manual_trafic+0x240>)
 8001038:	701a      	strb	r2, [r3, #0]
			sendString("!Save count red#");
 800103a:	4871      	ldr	r0, [pc, #452]	; (8001200 <manual_trafic+0x250>)
 800103c:	f000 f9c8 	bl	80013d0 <sendString>
			if(count_red < count_green)
 8001040:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <manual_trafic+0x240>)
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <manual_trafic+0x254>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d208      	bcs.n	800105e <manual_trafic+0xae>
				count_yellow = count_green - count_red;
 800104c:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <manual_trafic+0x254>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <manual_trafic+0x240>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <manual_trafic+0x24c>)
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <manual_trafic+0xbe>
			else{
				count_green = count_red - count_yellow;
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <manual_trafic+0x240>)
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	4b66      	ldr	r3, [pc, #408]	; (80011fc <manual_trafic+0x24c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <manual_trafic+0x254>)
 800106c:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 800106e:	4b65      	ldr	r3, [pc, #404]	; (8001204 <manual_trafic+0x254>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <manual_trafic+0x240>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	4a60      	ldr	r2, [pc, #384]	; (80011fc <manual_trafic+0x24c>)
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <manual_trafic+0x258>)
 8001088:	701a      	strb	r2, [r3, #0]
		}

		break;
 800108a:	e0a8      	b.n	80011de <manual_trafic+0x22e>
	case MANUAL_YELLOW:
		if(timer2_flag){
 800108c:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <manual_trafic+0x248>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <manual_trafic+0xee>
			setTimer2(50);
 8001094:	2032      	movs	r0, #50	; 0x32
 8001096:	f7ff fac7 	bl	8000628 <setTimer2>
			Blink_Yellow();
 800109a:	f7ff fe41 	bl	8000d20 <Blink_Yellow>
		}
		if(isButtonMode()){
 800109e:	f7ff f93d 	bl	800031c <isButtonMode>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <manual_trafic+0x106>
			status_manual = MANUAL_GREEN;
 80010a8:	4b50      	ldr	r3, [pc, #320]	; (80011ec <manual_trafic+0x23c>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	701a      	strb	r2, [r3, #0]
			count_buffer = count_green;
 80010ae:	4b55      	ldr	r3, [pc, #340]	; (8001204 <manual_trafic+0x254>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <manual_trafic+0x244>)
 80010b4:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 80010b6:	f7ff f955 	bl	8000364 <isButtonTime>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <manual_trafic+0x11c>
			count_buffer++;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <manual_trafic+0x244>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <manual_trafic+0x244>)
 80010ca:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 80010cc:	f7ff f95c 	bl	8000388 <isButtonEnter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8085 	beq.w	80011e2 <manual_trafic+0x232>
			count_yellow = count_buffer;
 80010d8:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <manual_trafic+0x244>)
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b47      	ldr	r3, [pc, #284]	; (80011fc <manual_trafic+0x24c>)
 80010de:	701a      	strb	r2, [r3, #0]
			sendString("!Save count yellow#");
 80010e0:	484a      	ldr	r0, [pc, #296]	; (800120c <manual_trafic+0x25c>)
 80010e2:	f000 f975 	bl	80013d0 <sendString>
			if(count_red < count_green)
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <manual_trafic+0x240>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <manual_trafic+0x254>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d208      	bcs.n	8001104 <manual_trafic+0x154>
				count_red = count_green - count_yellow;
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <manual_trafic+0x254>)
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <manual_trafic+0x24c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <manual_trafic+0x240>)
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e007      	b.n	8001114 <manual_trafic+0x164>
			else{
				count_green = count_red - count_yellow;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <manual_trafic+0x240>)
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <manual_trafic+0x24c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <manual_trafic+0x254>)
 8001112:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <manual_trafic+0x254>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <manual_trafic+0x240>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a36      	ldr	r2, [pc, #216]	; (80011fc <manual_trafic+0x24c>)
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	4413      	add	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <manual_trafic+0x258>)
 800112e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001130:	e057      	b.n	80011e2 <manual_trafic+0x232>
	case MANUAL_GREEN:
		if(timer2_flag){
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <manual_trafic+0x248>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <manual_trafic+0x194>
			setTimer2(50);
 800113a:	2032      	movs	r0, #50	; 0x32
 800113c:	f7ff fa74 	bl	8000628 <setTimer2>
			Blink_Green();
 8001140:	f7ff fd9e 	bl	8000c80 <Blink_Green>
		}
		if(isButtonMode()){
 8001144:	f7ff f8ea 	bl	800031c <isButtonMode>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <manual_trafic+0x1ac>
			status_manual = MANUAL_RED;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <manual_trafic+0x23c>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
			count_buffer = count_red;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <manual_trafic+0x240>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <manual_trafic+0x244>)
 800115a:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonTime()){
 800115c:	f7ff f902 	bl	8000364 <isButtonTime>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <manual_trafic+0x1c2>
			count_buffer++;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <manual_trafic+0x244>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <manual_trafic+0x244>)
 8001170:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonEnter()){
 8001172:	f7ff f909 	bl	8000388 <isButtonEnter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d034      	beq.n	80011e6 <manual_trafic+0x236>
			count_green = count_buffer;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <manual_trafic+0x244>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <manual_trafic+0x254>)
 8001182:	701a      	strb	r2, [r3, #0]
			sendString("!Save count green#");
 8001184:	4822      	ldr	r0, [pc, #136]	; (8001210 <manual_trafic+0x260>)
 8001186:	f000 f923 	bl	80013d0 <sendString>
			if(count_red < count_green)
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <manual_trafic+0x240>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <manual_trafic+0x254>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d208      	bcs.n	80011a8 <manual_trafic+0x1f8>
				count_red = count_green - count_yellow;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <manual_trafic+0x254>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <manual_trafic+0x24c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <manual_trafic+0x240>)
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e007      	b.n	80011b8 <manual_trafic+0x208>
			else{
				count_yellow = count_red - count_green;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <manual_trafic+0x240>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <manual_trafic+0x254>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <manual_trafic+0x24c>)
 80011b6:	701a      	strb	r2, [r3, #0]
			}
			count_tuning = 2*(count_green + count_red + count_yellow);
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <manual_trafic+0x254>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <manual_trafic+0x240>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <manual_trafic+0x24c>)
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <manual_trafic+0x258>)
 80011d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011d4:	e007      	b.n	80011e6 <manual_trafic+0x236>
	default:
		status_manual = MANUAL_INIT;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <manual_trafic+0x23c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
	}
}
 80011dc:	e004      	b.n	80011e8 <manual_trafic+0x238>
		break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <manual_trafic+0x238>
		break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <manual_trafic+0x238>
		break;
 80011e6:	bf00      	nop
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001ec 	.word	0x200001ec
 80011f0:	200001e9 	.word	0x200001e9
 80011f4:	2000033b 	.word	0x2000033b
 80011f8:	20000328 	.word	0x20000328
 80011fc:	200001ea 	.word	0x200001ea
 8001200:	08004aa8 	.word	0x08004aa8
 8001204:	200001eb 	.word	0x200001eb
 8001208:	200001ed 	.word	0x200001ed
 800120c:	08004abc 	.word	0x08004abc
 8001210:	08004ad0 	.word	0x08004ad0

08001214 <tuning_traffic>:

int PWM = 0;
void tuning_traffic(){ //person walking on phase1
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(isButtonPedes()){
 8001218:	f7ff f86e 	bl	80002f8 <isButtonPedes>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d010      	beq.n	8001244 <tuning_traffic+0x30>
		flag_tuning = 1;
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <tuning_traffic+0xc8>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
		count_tuning = 2*(count_green + count_red + count_yellow);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <tuning_traffic+0xcc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <tuning_traffic+0xd0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <tuning_traffic+0xd4>)
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <tuning_traffic+0xd8>)
 8001242:	701a      	strb	r2, [r3, #0]
	}
	if(count_tuning <= 0){
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <tuning_traffic+0xd8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d115      	bne.n	8001278 <tuning_traffic+0x64>
		flag_tuning = 0;
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <tuning_traffic+0xc8>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
		Pedes_Off();
 8001252:	f7ff fcfb 	bl	8000c4c <Pedes_Off>
		buzzer_SetVolume(0);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff f8b2 	bl	80003c0 <buzzer_SetVolume>
		count_tuning = 2*(count_green + count_red + count_yellow);
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <tuning_traffic+0xcc>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <tuning_traffic+0xd0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <tuning_traffic+0xd4>)
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <tuning_traffic+0xd8>)
 8001276:	701a      	strb	r2, [r3, #0]
	}
	if(flag_tuning){
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <tuning_traffic+0xc8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d027      	beq.n	80012d0 <tuning_traffic+0xbc>
		switch(flag_color){
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <tuning_traffic+0xdc>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d01d      	beq.n	80012c4 <tuning_traffic+0xb0>
 8001288:	2b0c      	cmp	r3, #12
 800128a:	dc24      	bgt.n	80012d6 <tuning_traffic+0xc2>
 800128c:	2b0a      	cmp	r3, #10
 800128e:	d013      	beq.n	80012b8 <tuning_traffic+0xa4>
 8001290:	2b0b      	cmp	r3, #11
 8001292:	d120      	bne.n	80012d6 <tuning_traffic+0xc2>
			case TUNING_GREEN:
				Pedes_GreenOn();
 8001294:	f7ff fc8c 	bl	8000bb0 <Pedes_GreenOn>
				if(counter_normal <= 3){
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <tuning_traffic+0xe0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d819      	bhi.n	80012d4 <tuning_traffic+0xc0>
					buzzer_SetVolume(99-counter_normal*30);
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <tuning_traffic+0xe0>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	3363      	adds	r3, #99	; 0x63
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f885 	bl	80003c0 <buzzer_SetVolume>
//					} else {
//						PWM = 0;
//						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
//					}
				}
				break;
 80012b6:	e00d      	b.n	80012d4 <tuning_traffic+0xc0>
			case TUNING_RED:
				Pedes_RedOn();
 80012b8:	f7ff fc94 	bl	8000be4 <Pedes_RedOn>
				buzzer_SetVolume(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff f87f 	bl	80003c0 <buzzer_SetVolume>
				break;
 80012c2:	e008      	b.n	80012d6 <tuning_traffic+0xc2>
			case TUNING_YELLOW:
				Pedes_YellowOn();
 80012c4:	f7ff fca8 	bl	8000c18 <Pedes_YellowOn>
				buzzer_SetVolume(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff f879 	bl	80003c0 <buzzer_SetVolume>
				break;
 80012ce:	e002      	b.n	80012d6 <tuning_traffic+0xc2>
		}
	}
 80012d0:	bf00      	nop
 80012d2:	e000      	b.n	80012d6 <tuning_traffic+0xc2>
				break;
 80012d4:	bf00      	nop
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000033c 	.word	0x2000033c
 80012e0:	200001eb 	.word	0x200001eb
 80012e4:	200001e9 	.word	0x200001e9
 80012e8:	200001ea 	.word	0x200001ea
 80012ec:	200001ed 	.word	0x200001ed
 80012f0:	2000033d 	.word	0x2000033d
 80012f4:	20000338 	.word	0x20000338

080012f8 <traffic_light>:

void traffic_light(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	switch(status_traffic){
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <traffic_light+0x88>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d002      	beq.n	800130a <traffic_light+0x12>
 8001304:	2b10      	cmp	r3, #16
 8001306:	d01d      	beq.n	8001344 <traffic_light+0x4c>
 8001308:	e033      	b.n	8001372 <traffic_light+0x7a>
	case AUTOMATIC:
		if(timer1_flag){
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <traffic_light+0x8c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00d      	beq.n	800132e <traffic_light+0x36>
			setTimer1(100);
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f7ff f974 	bl	8000600 <setTimer1>
			normal_trafic();
 8001318:	f7ff fd2a 	bl	8000d70 <normal_trafic>
			send7seg(num1, num2);
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <traffic_light+0x90>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <traffic_light+0x94>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f000 f88d 	bl	8001448 <send7seg>
		}
		if(isModeLongPress()){
 800132e:	f7ff f807 	bl	8000340 <isModeLongPress>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <traffic_light+0x46>
			status_traffic = MANUAL;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <traffic_light+0x88>)
 800133a:	2210      	movs	r2, #16
 800133c:	701a      	strb	r2, [r3, #0]
		}
		tuning_traffic();
 800133e:	f7ff ff69 	bl	8001214 <tuning_traffic>
		//send uart 2 phase counter
		break;
 8001342:	e01b      	b.n	800137c <traffic_light+0x84>
	case MANUAL:
		manual_trafic();
 8001344:	f7ff fe34 	bl	8000fb0 <manual_trafic>
		if(timer1_flag){
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <traffic_light+0x8c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <traffic_light+0x68>
			setTimer1(100);
 8001350:	2064      	movs	r0, #100	; 0x64
 8001352:	f7ff f955 	bl	8000600 <setTimer1>
			sendManual(count_buffer);
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <traffic_light+0x98>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f898 	bl	8001490 <sendManual>
		}
		if(isModeLongPress()){
 8001360:	f7fe ffee 	bl	8000340 <isModeLongPress>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <traffic_light+0x82>
			status_traffic = AUTOMATIC;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <traffic_light+0x88>)
 800136c:	220f      	movs	r2, #15
 800136e:	701a      	strb	r2, [r3, #0]
		}
		//send temp or ?????
		break;
 8001370:	e003      	b.n	800137a <traffic_light+0x82>
	default:
		status_traffic = AUTOMATIC;
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <traffic_light+0x88>)
 8001374:	220f      	movs	r2, #15
 8001376:	701a      	strb	r2, [r3, #0]
	}
}
 8001378:	e000      	b.n	800137c <traffic_light+0x84>
		break;
 800137a:	bf00      	nop
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001ee 	.word	0x200001ee
 8001384:	20000320 	.word	0x20000320
 8001388:	20000339 	.word	0x20000339
 800138c:	2000033a 	.word	0x2000033a
 8001390:	2000033b 	.word	0x2000033b

08001394 <HAL_UART_RxCpltCallback>:
//UART_HandleTypeDef huart2;

unsigned char temp = 0;
uint8_t msg[100];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_UART_RxCpltCallback+0x30>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10a      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 200);
 80013a6:	23c8      	movs	r3, #200	; 0xc8
 80013a8:	2201      	movs	r2, #1
 80013aa:	4907      	ldr	r1, [pc, #28]	; (80013c8 <HAL_UART_RxCpltCallback+0x34>)
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <HAL_UART_RxCpltCallback+0x38>)
 80013ae:	f002 f8db 	bl	8003568 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	4904      	ldr	r1, [pc, #16]	; (80013c8 <HAL_UART_RxCpltCallback+0x34>)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_UART_RxCpltCallback+0x38>)
 80013b8:	f002 f959 	bl	800366e <HAL_UART_Receive_IT>
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40004400 	.word	0x40004400
 80013c8:	2000033e 	.word	0x2000033e
 80013cc:	2000043c 	.word	0x2000043c

080013d0 <sendString>:

void sendString(uint8_t* str){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4907      	ldr	r1, [pc, #28]	; (80013f8 <sendString+0x28>)
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <sendString+0x2c>)
 80013de:	f002 ff1d 	bl	800421c <siprintf>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	230a      	movs	r3, #10
 80013e8:	4904      	ldr	r1, [pc, #16]	; (80013fc <sendString+0x2c>)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <sendString+0x30>)
 80013ec:	f002 f8bc 	bl	8003568 <HAL_UART_Transmit>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08004ae4 	.word	0x08004ae4
 80013fc:	200003d8 	.word	0x200003d8
 8001400:	2000043c 	.word	0x2000043c

08001404 <sendNum>:

void sendNum(uint8_t num) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
    char number[3];
    sprintf(number, "%.2d", num);
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	490a      	ldr	r1, [pc, #40]	; (8001440 <sendNum+0x3c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f002 ff00 	bl	800421c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 10);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fe93 	bl	800014c <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 010c 	add.w	r1, r7, #12
 800142e:	230a      	movs	r3, #10
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <sendNum+0x40>)
 8001432:	f002 f899 	bl	8003568 <HAL_UART_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	08004ae8 	.word	0x08004ae8
 8001444:	2000043c 	.word	0x2000043c

08001448 <send7seg>:

void send7seg(uint8_t phase1, uint8_t phase2){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
	sendString("!Phase 1: ");
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <send7seg+0x3c>)
 800145a:	f7ff ffb9 	bl	80013d0 <sendString>
	sendNum(phase1);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffcf 	bl	8001404 <sendNum>
	sendString("; Phase 2: ");
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <send7seg+0x40>)
 8001468:	f7ff ffb2 	bl	80013d0 <sendString>
	sendNum(phase2);
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffc8 	bl	8001404 <sendNum>
	sendString("#\r\n");
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <send7seg+0x44>)
 8001476:	f7ff ffab 	bl	80013d0 <sendString>
//	HAL_UART_Transmit(&huart2, (uint8_t*) "#\r\n", 3, 100);
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08004af0 	.word	0x08004af0
 8001488:	08004afc 	.word	0x08004afc
 800148c:	08004b08 	.word	0x08004b08

08001490 <sendManual>:

void sendManual(uint8_t temp){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	sendString("!Temporary value: ");
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <sendManual+0x28>)
 800149c:	f7ff ff98 	bl	80013d0 <sendString>
	sendNum(temp);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffae 	bl	8001404 <sendNum>
	sendString("#\r\n");
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <sendManual+0x2c>)
 80014aa:	f7ff ff91 	bl	80013d0 <sendString>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08004b0c 	.word	0x08004b0c
 80014bc:	08004b08 	.word	0x08004b08

080014c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART2_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f8:	f001 ffe6 	bl	80034c8 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f7ff f878 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000043c 	.word	0x2000043c
 8001510:	40004400 	.word	0x40004400

08001514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <HAL_UART_MspInit+0x98>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d137      	bne.n	80015a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153e:	61d3      	str	r3, [r2, #28]
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001564:	2304      	movs	r3, #4
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4619      	mov	r1, r3
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <HAL_UART_MspInit+0xa0>)
 8001578:	f000 fa66 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800157c:	2308      	movs	r3, #8
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <HAL_UART_MspInit+0xa0>)
 8001590:	f000 fa5a 	bl	8001a48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2026      	movs	r0, #38	; 0x26
 800159a:	f000 f96c 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159e:	2026      	movs	r0, #38	; 0x26
 80015a0:	f000 f985 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010800 	.word	0x40010800

080015b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b8:	f7ff f930 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015be:	490c      	ldr	r1, [pc, #48]	; (80015f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d4:	4c09      	ldr	r4, [pc, #36]	; (80015fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f002 fdef 	bl	80041c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e6:	f7fe ff91 	bl	800050c <main>
  bx lr
 80015ea:	4770      	bx	lr
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80015f4:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 80015f8:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80015fc:	20000498 	.word	0x20000498

08001600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_2_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x28>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x28>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f923 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff f858 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f93b 	bl	80018ca <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 f903 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200001e4 	.word	0x200001e4
 8001688:	200001f4 	.word	0x200001f4
 800168c:	200001f0 	.word	0x200001f0

08001690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x1c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x20>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_IncTick+0x20>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	200001f4 	.word	0x200001f4
 80016b0:	20000484 	.word	0x20000484

080016b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_GetTick+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000484 	.word	0x20000484

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4906      	ldr	r1, [pc, #24]	; (8001760 <__NVIC_EnableIRQ+0x34>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff90 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff2d 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff42 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff90 	bl	80017b8 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5f 	bl	8001764 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff35 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d008      	beq.n	800190c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e020      	b.n	800194e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020e 	bic.w	r2, r2, #14
 800191a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d005      	beq.n	800197c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2204      	movs	r2, #4
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	e051      	b.n	8001a20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 020e 	bic.w	r2, r2, #14
 800198a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <HAL_DMA_Abort_IT+0xd4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_DMA_Abort_IT+0xd8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x9e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_DMA_Abort_IT+0xdc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x98>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_DMA_Abort_IT+0xe0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_Abort_IT+0x92>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_DMA_Abort_IT+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00a      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x8c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_DMA_Abort_IT+0xe8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_DMA_Abort_IT+0x86>
 80019d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e2:	e00b      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	e008      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	e005      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f4:	e002      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019f6:	2310      	movs	r3, #16
 80019f8:	e000      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019fa:	2301      	movs	r3, #1
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_DMA_Abort_IT+0xec>)
 80019fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
    } 
  }
  return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40020008 	.word	0x40020008
 8001a30:	4002001c 	.word	0x4002001c
 8001a34:	40020030 	.word	0x40020030
 8001a38:	40020044 	.word	0x40020044
 8001a3c:	40020058 	.word	0x40020058
 8001a40:	4002006c 	.word	0x4002006c
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e169      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8158 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d05e      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a84:	4a98      	ldr	r2, [pc, #608]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d875      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a98      	ldr	r2, [pc, #608]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d058      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a90:	4a96      	ldr	r2, [pc, #600]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d86f      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a96:	4a96      	ldr	r2, [pc, #600]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d052      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a94      	ldr	r2, [pc, #592]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d869      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a94      	ldr	r2, [pc, #592]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04c      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a92      	ldr	r2, [pc, #584]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d863      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aae:	4a92      	ldr	r2, [pc, #584]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d046      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a90      	ldr	r2, [pc, #576]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d85d      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d82a      	bhi.n	8001b14 <HAL_GPIO_Init+0xcc>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d859      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_GPIO_Init+0x80>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b43 	.word	0x08001b43
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001b2f 	.word	0x08001b2f
 8001ad4:	08001b71 	.word	0x08001b71
 8001ad8:	08001b77 	.word	0x08001b77
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <HAL_GPIO_Init+0x2b4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e02c      	b.n	8001b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e029      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e024      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e01f      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e01a      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e013      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	611a      	str	r2, [r3, #16]
          break;
 8001b62:	e009      	b.n	8001b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
          break;
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          break;
 8001b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d801      	bhi.n	8001b82 <HAL_GPIO_Init+0x13a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_Init+0x13e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d802      	bhi.n	8001b94 <HAL_GPIO_Init+0x14c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x152>
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3b08      	subs	r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80b1 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x1ec>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e004      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	f002 0203 	and.w	r2, r2, #3
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c46:	492f      	ldr	r1, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	492c      	ldr	r1, [pc, #176]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4928      	ldr	r1, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4922      	ldr	r1, [pc, #136]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	491e      	ldr	r1, [pc, #120]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4918      	ldr	r1, [pc, #96]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4914      	ldr	r1, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e021      	b.n	8001d2a <HAL_GPIO_Init+0x2e2>
 8001ce6:	bf00      	nop
 8001ce8:	10320000 	.word	0x10320000
 8001cec:	10310000 	.word	0x10310000
 8001cf0:	10220000 	.word	0x10220000
 8001cf4:	10210000 	.word	0x10210000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10110000 	.word	0x10110000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40011400 	.word	0x40011400
 8001d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4909      	ldr	r1, [pc, #36]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae8e 	bne.w	8001a5c <HAL_GPIO_Init+0x14>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	041a      	lsls	r2, r3, #16
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	400b      	ands	r3, r1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e26c      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8087 	beq.w	8001f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d00c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d112      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5e>
 8001e18:	4b8c      	ldr	r3, [pc, #560]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d10b      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d06c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x12c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d168      	bne.n	8001f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e246      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x76>
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a7f      	ldr	r2, [pc, #508]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e02e      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x98>
 8001e5e:	4b7b      	ldr	r3, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7a      	ldr	r2, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a77      	ldr	r2, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0xbc>
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a71      	ldr	r2, [pc, #452]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e9c:	4b6b      	ldr	r3, [pc, #428]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a67      	ldr	r2, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fbfa 	bl	80016b4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fbf6 	bl	80016b4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1fa      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe4>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fbe6 	bl	80016b4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fbe2 	bl	80016b4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1e6      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x10c>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x18c>
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x176>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1ba      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4939      	ldr	r1, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb9b 	bl	80016b4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fb97 	bl	80016b4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e19b      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4927      	ldr	r1, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fb7a 	bl	80016b4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fb76 	bl	80016b4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e17a      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03a      	beq.n	8002064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d019      	beq.n	800202a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fb5a 	bl	80016b4 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fb56 	bl	80016b4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e15a      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002022:	2001      	movs	r0, #1
 8002024:	f000 facc 	bl	80025c0 <RCC_Delay>
 8002028:	e01c      	b.n	8002064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fb40 	bl	80016b4 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fb3c 	bl	80016b4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d908      	bls.n	8002058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e140      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	42420000 	.word	0x42420000
 8002054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e9      	bne.n	8002038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a6 	beq.w	80021be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b97      	ldr	r3, [pc, #604]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b94      	ldr	r3, [pc, #592]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a93      	ldr	r2, [pc, #588]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b91      	ldr	r3, [pc, #580]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a8a      	ldr	r2, [pc, #552]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fafd 	bl	80016b4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff faf9 	bl	80016b4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0fd      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x312>
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e02d      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x334>
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a75      	ldr	r2, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b73      	ldr	r3, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a72      	ldr	r2, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x356>
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a6c      	ldr	r2, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a69      	ldr	r2, [pc, #420]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff faad 	bl	80016b4 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff faa9 	bl	80016b4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0ab      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x37e>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff fa97 	bl	80016b4 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fa93 	bl	80016b4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e095      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8081 	beq.w	80022ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d061      	beq.n	8002298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d146      	bne.n	800226a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fa67 	bl	80016b4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff fa63 	bl	80016b4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e067      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	492d      	ldr	r1, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a19      	ldr	r1, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	430b      	orrs	r3, r1
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fa37 	bl	80016b4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff fa33 	bl	80016b4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e037      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x46a>
 8002268:	e02f      	b.n	80022ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fa20 	bl	80016b4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff fa1c 	bl	80016b4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e020      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x498>
 8002296:	e018      	b.n	80022ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42420060 	.word	0x42420060

080022e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800235e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7ff f970 	bl	80016b4 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff f96c 	bl	80016b4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4922      	ldr	r1, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f8ce 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08004b20 	.word	0x08004b20
 80024ac:	200001e4 	.word	0x200001e4
 80024b0:	200001f0 	.word	0x200001f0

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e027      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e027      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	fb02 f203 	mul.w	r2, r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08004b38 	.word	0x08004b38
 8002554:	08004b48 	.word	0x08004b48
 8002558:	003d0900 	.word	0x003d0900

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_RCC_GetHCLKFreq+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	200001e4 	.word	0x200001e4

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff fff2 	bl	800255c <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004b30 	.word	0x08004b30

08002598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800259c:	f7ff ffde 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0adb      	lsrs	r3, r3, #11
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004b30 	.word	0x08004b30

080025c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <RCC_Delay+0x34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <RCC_Delay+0x38>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025dc:	bf00      	nop
  }
  while (Delay --);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	60fa      	str	r2, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <RCC_Delay+0x1c>
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	200001e4 	.word	0x200001e4
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe f9c4 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fc30 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e03a      	b.n	800272a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_TIM_Base_Start_IT+0x98>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d009      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_TIM_Base_Start_IT+0x9c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x58>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_TIM_Base_Start_IT+0xa0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d111      	bne.n	8002718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d010      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	e007      	b.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f839 	bl	80027de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fb8e 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_TIM_PWM_Start+0x24>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e022      	b.n	800285a <HAL_TIM_PWM_Start+0x6a>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d109      	bne.n	800282e <HAL_TIM_PWM_Start+0x3e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	bf14      	ite	ne
 8002826:	2301      	movne	r3, #1
 8002828:	2300      	moveq	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	e015      	b.n	800285a <HAL_TIM_PWM_Start+0x6a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d109      	bne.n	8002848 <HAL_TIM_PWM_Start+0x58>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e008      	b.n	800285a <HAL_TIM_PWM_Start+0x6a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e05e      	b.n	8002920 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <HAL_TIM_PWM_Start+0x82>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	e013      	b.n	800289a <HAL_TIM_PWM_Start+0xaa>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d104      	bne.n	8002882 <HAL_TIM_PWM_Start+0x92>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	e00b      	b.n	800289a <HAL_TIM_PWM_Start+0xaa>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start+0xa2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002890:	e003      	b.n	800289a <HAL_TIM_PWM_Start+0xaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2201      	movs	r2, #1
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fd7c 	bl	80033a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_TIM_PWM_Start+0x138>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d107      	bne.n	80028c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_TIM_PWM_Start+0x138>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_TIM_PWM_Start+0xfa>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d009      	beq.n	80028ea <HAL_TIM_PWM_Start+0xfa>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_TIM_PWM_Start+0x13c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_TIM_PWM_Start+0xfa>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a12      	ldr	r2, [pc, #72]	; (8002930 <HAL_TIM_PWM_Start+0x140>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d010      	beq.n	800291e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290c:	e007      	b.n	800291e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800

08002934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0202 	mvn.w	r2, #2
 8002960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa76 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa69 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa78 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b04      	cmp	r3, #4
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0204 	mvn.w	r2, #4
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa4c 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa3f 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fa4e 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0208 	mvn.w	r2, #8
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa22 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa15 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fa24 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0210 	mvn.w	r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2208      	movs	r2, #8
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9f8 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9eb 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9fa 	bl	8002e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0201 	mvn.w	r2, #1
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fd93 	bl	80005de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b80      	cmp	r3, #128	; 0x80
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fce9 	bl	80034b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9be 	bl	8002e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0220 	mvn.w	r2, #32
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fcb4 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0ae      	b.n	8002cc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	f200 809f 	bhi.w	8002cb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	08002cb1 	.word	0x08002cb1
 8002b80:	08002cb1 	.word	0x08002cb1
 8002b84:	08002cb1 	.word	0x08002cb1
 8002b88:	08002bed 	.word	0x08002bed
 8002b8c:	08002cb1 	.word	0x08002cb1
 8002b90:	08002cb1 	.word	0x08002cb1
 8002b94:	08002cb1 	.word	0x08002cb1
 8002b98:	08002c2f 	.word	0x08002c2f
 8002b9c:	08002cb1 	.word	0x08002cb1
 8002ba0:	08002cb1 	.word	0x08002cb1
 8002ba4:	08002cb1 	.word	0x08002cb1
 8002ba8:	08002c6f 	.word	0x08002c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f9d6 	bl	8002f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	619a      	str	r2, [r3, #24]
      break;
 8002bea:	e064      	b.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fa1c 	bl	8003030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6999      	ldr	r1, [r3, #24]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
      break;
 8002c2c:	e043      	b.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa65 	bl	8003104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0208 	orr.w	r2, r2, #8
 8002c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0204 	bic.w	r2, r2, #4
 8002c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69d9      	ldr	r1, [r3, #28]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
      break;
 8002c6c:	e023      	b.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 faaf 	bl	80031d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69d9      	ldr	r1, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0b4      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x186>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1c:	d03e      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xd4>
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d22:	f200 8087 	bhi.w	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	f000 8086 	beq.w	8002e3a <HAL_TIM_ConfigClockSource+0x172>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d87f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b70      	cmp	r3, #112	; 0x70
 8002d36:	d01a      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xa6>
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d87b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d050      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d40:	2b60      	cmp	r3, #96	; 0x60
 8002d42:	d877      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d03c      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d48:	2b50      	cmp	r3, #80	; 0x50
 8002d4a:	d873      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d058      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x13a>
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d86f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d064      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d86b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d060      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d867      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d05a      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d6c:	e062      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f000 faf0 	bl	8003362 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
      break;
 8002d9a:	e04f      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f000 fad9 	bl	8003362 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dbe:	609a      	str	r2, [r3, #8]
      break;
 8002dc0:	e03c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 fa50 	bl	8003274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2150      	movs	r1, #80	; 0x50
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 faa7 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002de0:	e02c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f000 fa6e 	bl	80032d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2160      	movs	r1, #96	; 0x60
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fa97 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002e00:	e01c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 fa30 	bl	8003274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fa87 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002e20:	e00c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 fa7e 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002e32:	e003      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_Base_SetConfig+0xb8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_Base_SetConfig+0x30>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d007      	beq.n	8002ed0 <TIM_Base_SetConfig+0x30>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <TIM_Base_SetConfig+0xbc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0x30>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d108      	bne.n	8002ee2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <TIM_Base_SetConfig+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <TIM_Base_SetConfig+0x62>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d007      	beq.n	8002f02 <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <TIM_Base_SetConfig+0xbc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_Base_SetConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d108      	bne.n	8002f14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <TIM_Base_SetConfig+0xb8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800

08002f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f023 0201 	bic.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <TIM_OC1_SetConfig+0xc8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10c      	bne.n	8002fda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0308 	bic.w	r3, r3, #8
 8002fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <TIM_OC1_SetConfig+0xc8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d111      	bne.n	8003006 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00

08003030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 0210 	bic.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0320 	bic.w	r3, r3, #32
 800307a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <TIM_OC2_SetConfig+0xd0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10d      	bne.n	80030ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <TIM_OC2_SetConfig+0xd0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d113      	bne.n	80030dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00

08003104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800314c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <TIM_OC3_SetConfig+0xd0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10d      	bne.n	800317e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800317c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <TIM_OC3_SetConfig+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d113      	bne.n	80031ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800318c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	621a      	str	r2, [r3, #32]
}
 80031c8:	bf00      	nop
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	031b      	lsls	r3, r3, #12
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <TIM_OC4_SetConfig+0x98>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d109      	bne.n	800324c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00

08003274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0201 	bic.w	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 030a 	bic.w	r3, r3, #10
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0210 	bic.w	r2, r3, #16
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	031b      	lsls	r3, r3, #12
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	f043 0307 	orr.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	021a      	lsls	r2, r3, #8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	431a      	orrs	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	609a      	str	r2, [r3, #8]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2201      	movs	r2, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e046      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e042      	b.n	8003560 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe f810 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	; 0x24
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fdc5 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b20      	cmp	r3, #32
 8003586:	d16d      	bne.n	8003664 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_UART_Transmit+0x2c>
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e066      	b.n	8003666 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	; 0x21
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a6:	f7fe f885 	bl	80016b4 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c0:	d108      	bne.n	80035d4 <HAL_UART_Transmit+0x6c>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e003      	b.n	80035dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035dc:	e02a      	b.n	8003634 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fb14 	bl	8003c16 <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e036      	b.n	8003666 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3302      	adds	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e007      	b.n	8003626 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cf      	bne.n	80035de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fae4 	bl	8003c16 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e006      	b.n	8003666 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	d112      	bne.n	80036ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_UART_Receive_IT+0x26>
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e00b      	b.n	80036b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	461a      	mov	r2, r3
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fb24 	bl	8003cf2 <UART_Start_Receive_IT>
 80036aa:	4603      	mov	r3, r0
 80036ac:	e000      	b.n	80036b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ba      	sub	sp, #232	; 0xe8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fc01 	bl	8003f1e <UART_Receive_IT>
      return;
 800371c:	e25b      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80de 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003738:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d1 	beq.w	80038e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 81f2 	beq.w	8003bcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fb8c 	bl	8003f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_UART_IRQHandler+0x17a>
 800382a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa96 	bl	8003d64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d041      	beq.n	80038ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3314      	adds	r3, #20
 800384c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800387e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800388a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1d9      	bne.n	8003846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	4a7e      	ldr	r2, [pc, #504]	; (8003a98 <HAL_UART_IRQHandler+0x3e0>)
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe f856 	bl	8001958 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00e      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f993 	bl	8003bee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00a      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f98f 	bl	8003bee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e006      	b.n	80038e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f98b 	bl	8003bee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038de:	e175      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	bf00      	nop
    return;
 80038e2:	e173      	b.n	8003bcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 814f 	bne.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8148 	beq.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8141 	beq.w	8003b8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80b6 	beq.w	8003a9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800393c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8145 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800394a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800394e:	429a      	cmp	r2, r3
 8003950:	f080 813e 	bcs.w	8003bd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b20      	cmp	r3, #32
 8003964:	f000 8088 	beq.w	8003a78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800397e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003994:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1d9      	bne.n	8003968 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e1      	bne.n	80039b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd ff35 	bl	80018e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8b6 	bl	8003c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a94:	e09c      	b.n	8003bd0 <HAL_UART_IRQHandler+0x518>
 8003a96:	bf00      	nop
 8003a98:	08003e29 	.word	0x08003e29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 808e 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8089 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ae8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e3      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b64:	61fa      	str	r2, [r7, #28]
 8003b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	617b      	str	r3, [r7, #20]
   return(result);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e3      	bne.n	8003b40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f83b 	bl	8003c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b8a:	e023      	b.n	8003bd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d009      	beq.n	8003bac <HAL_UART_IRQHandler+0x4f4>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f953 	bl	8003e50 <UART_Transmit_IT>
    return;
 8003baa:	e014      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f992 	bl	8003eee <UART_EndTransmit_IT>
    return;
 8003bca:	e004      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bd4:	bf00      	nop
  }
}
 8003bd6:	37e8      	adds	r7, #232	; 0xe8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b090      	sub	sp, #64	; 0x40
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	e050      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d04c      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c36:	f7fd fd3d 	bl	80016b4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d241      	bcs.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	637a      	str	r2, [r7, #52]	; 0x34
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9a:	623a      	str	r2, [r7, #32]
 8003c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d09f      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3740      	adds	r7, #64	; 0x40
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2222      	movs	r2, #34	; 0x22
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b095      	sub	sp, #84	; 0x54
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d8c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d119      	bne.n	8003e10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	647b      	str	r3, [r7, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dfc:	61ba      	str	r2, [r7, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e1e:	bf00      	nop
 8003e20:	3754      	adds	r7, #84	; 0x54
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff fed3 	bl	8003bee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b21      	cmp	r3, #33	; 0x21
 8003e62:	d13e      	bne.n	8003ee2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	d114      	bne.n	8003e98 <UART_Transmit_IT+0x48>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d110      	bne.n	8003e98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]
 8003e96:	e008      	b.n	8003eaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	1c59      	adds	r1, r3, #1
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6211      	str	r1, [r2, #32]
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe64 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08c      	sub	sp, #48	; 0x30
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b22      	cmp	r3, #34	; 0x22
 8003f30:	f040 80ae 	bne.w	8004090 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d117      	bne.n	8003f6e <UART_Receive_IT+0x50>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f6c:	e026      	b.n	8003fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f80:	d007      	beq.n	8003f92 <UART_Receive_IT+0x74>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <UART_Receive_IT+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e008      	b.n	8003fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d15d      	bne.n	800408c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0220 	bic.w	r2, r2, #32
 8003fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	2b01      	cmp	r3, #1
 8004014:	d135      	bne.n	8004082 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	613b      	str	r3, [r7, #16]
   return(result);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	623a      	str	r2, [r7, #32]
 800403e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	69f9      	ldr	r1, [r7, #28]
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	61bb      	str	r3, [r7, #24]
   return(result);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b10      	cmp	r3, #16
 800405c:	d10a      	bne.n	8004074 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fdc0 	bl	8003c00 <HAL_UARTEx_RxEventCallback>
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f986 	bl	8001394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e002      	b.n	8004092 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3730      	adds	r7, #48	; 0x30
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040d6:	f023 030c 	bic.w	r3, r3, #12
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <UART_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7fe fa48 	bl	8002598 <HAL_RCC_GetPCLK2Freq>
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	e002      	b.n	8004112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7fe fa30 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8004110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	0119      	lsls	r1, r3, #4
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	; 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	4419      	add	r1, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <UART_SetConfig+0x118>)
 8004182:	fba3 0302 	umull	r0, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2064      	movs	r0, #100	; 0x64
 800418a:	fb00 f303 	mul.w	r3, r0, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <UART_SetConfig+0x118>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	440a      	add	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40013800 	.word	0x40013800
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <__errno>:
 80041b8:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <__errno+0x8>)
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200001f8 	.word	0x200001f8

080041c4 <__libc_init_array>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	2600      	movs	r6, #0
 80041c8:	4d0c      	ldr	r5, [pc, #48]	; (80041fc <__libc_init_array+0x38>)
 80041ca:	4c0d      	ldr	r4, [pc, #52]	; (8004200 <__libc_init_array+0x3c>)
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	42a6      	cmp	r6, r4
 80041d2:	d109      	bne.n	80041e8 <__libc_init_array+0x24>
 80041d4:	f000 fc5c 	bl	8004a90 <_init>
 80041d8:	2600      	movs	r6, #0
 80041da:	4d0a      	ldr	r5, [pc, #40]	; (8004204 <__libc_init_array+0x40>)
 80041dc:	4c0a      	ldr	r4, [pc, #40]	; (8004208 <__libc_init_array+0x44>)
 80041de:	1b64      	subs	r4, r4, r5
 80041e0:	10a4      	asrs	r4, r4, #2
 80041e2:	42a6      	cmp	r6, r4
 80041e4:	d105      	bne.n	80041f2 <__libc_init_array+0x2e>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ec:	4798      	blx	r3
 80041ee:	3601      	adds	r6, #1
 80041f0:	e7ee      	b.n	80041d0 <__libc_init_array+0xc>
 80041f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f6:	4798      	blx	r3
 80041f8:	3601      	adds	r6, #1
 80041fa:	e7f2      	b.n	80041e2 <__libc_init_array+0x1e>
 80041fc:	08004b80 	.word	0x08004b80
 8004200:	08004b80 	.word	0x08004b80
 8004204:	08004b80 	.word	0x08004b80
 8004208:	08004b84 	.word	0x08004b84

0800420c <memset>:
 800420c:	4603      	mov	r3, r0
 800420e:	4402      	add	r2, r0
 8004210:	4293      	cmp	r3, r2
 8004212:	d100      	bne.n	8004216 <memset+0xa>
 8004214:	4770      	bx	lr
 8004216:	f803 1b01 	strb.w	r1, [r3], #1
 800421a:	e7f9      	b.n	8004210 <memset+0x4>

0800421c <siprintf>:
 800421c:	b40e      	push	{r1, r2, r3}
 800421e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004222:	b500      	push	{lr}
 8004224:	b09c      	sub	sp, #112	; 0x70
 8004226:	ab1d      	add	r3, sp, #116	; 0x74
 8004228:	9002      	str	r0, [sp, #8]
 800422a:	9006      	str	r0, [sp, #24]
 800422c:	9107      	str	r1, [sp, #28]
 800422e:	9104      	str	r1, [sp, #16]
 8004230:	4808      	ldr	r0, [pc, #32]	; (8004254 <siprintf+0x38>)
 8004232:	4909      	ldr	r1, [pc, #36]	; (8004258 <siprintf+0x3c>)
 8004234:	f853 2b04 	ldr.w	r2, [r3], #4
 8004238:	9105      	str	r1, [sp, #20]
 800423a:	6800      	ldr	r0, [r0, #0]
 800423c:	a902      	add	r1, sp, #8
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	f000 f868 	bl	8004314 <_svfiprintf_r>
 8004244:	2200      	movs	r2, #0
 8004246:	9b02      	ldr	r3, [sp, #8]
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	b01c      	add	sp, #112	; 0x70
 800424c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004250:	b003      	add	sp, #12
 8004252:	4770      	bx	lr
 8004254:	200001f8 	.word	0x200001f8
 8004258:	ffff0208 	.word	0xffff0208

0800425c <__ssputs_r>:
 800425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	688e      	ldr	r6, [r1, #8]
 8004262:	4682      	mov	sl, r0
 8004264:	429e      	cmp	r6, r3
 8004266:	460c      	mov	r4, r1
 8004268:	4690      	mov	r8, r2
 800426a:	461f      	mov	r7, r3
 800426c:	d838      	bhi.n	80042e0 <__ssputs_r+0x84>
 800426e:	898a      	ldrh	r2, [r1, #12]
 8004270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004274:	d032      	beq.n	80042dc <__ssputs_r+0x80>
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	6909      	ldr	r1, [r1, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	eba5 0901 	sub.w	r9, r5, r1
 8004280:	6965      	ldr	r5, [r4, #20]
 8004282:	444b      	add	r3, r9
 8004284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800428c:	106d      	asrs	r5, r5, #1
 800428e:	429d      	cmp	r5, r3
 8004290:	bf38      	it	cc
 8004292:	461d      	movcc	r5, r3
 8004294:	0553      	lsls	r3, r2, #21
 8004296:	d531      	bpl.n	80042fc <__ssputs_r+0xa0>
 8004298:	4629      	mov	r1, r5
 800429a:	f000 fb53 	bl	8004944 <_malloc_r>
 800429e:	4606      	mov	r6, r0
 80042a0:	b950      	cbnz	r0, 80042b8 <__ssputs_r+0x5c>
 80042a2:	230c      	movs	r3, #12
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f8ca 3000 	str.w	r3, [sl]
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	464a      	mov	r2, r9
 80042ba:	6921      	ldr	r1, [r4, #16]
 80042bc:	f000 face 	bl	800485c <memcpy>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	6126      	str	r6, [r4, #16]
 80042ce:	444e      	add	r6, r9
 80042d0:	6026      	str	r6, [r4, #0]
 80042d2:	463e      	mov	r6, r7
 80042d4:	6165      	str	r5, [r4, #20]
 80042d6:	eba5 0509 	sub.w	r5, r5, r9
 80042da:	60a5      	str	r5, [r4, #8]
 80042dc:	42be      	cmp	r6, r7
 80042de:	d900      	bls.n	80042e2 <__ssputs_r+0x86>
 80042e0:	463e      	mov	r6, r7
 80042e2:	4632      	mov	r2, r6
 80042e4:	4641      	mov	r1, r8
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	f000 fac6 	bl	8004878 <memmove>
 80042ec:	68a3      	ldr	r3, [r4, #8]
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	1b9b      	subs	r3, r3, r6
 80042f2:	4432      	add	r2, r6
 80042f4:	2000      	movs	r0, #0
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	6022      	str	r2, [r4, #0]
 80042fa:	e7db      	b.n	80042b4 <__ssputs_r+0x58>
 80042fc:	462a      	mov	r2, r5
 80042fe:	f000 fb7b 	bl	80049f8 <_realloc_r>
 8004302:	4606      	mov	r6, r0
 8004304:	2800      	cmp	r0, #0
 8004306:	d1e1      	bne.n	80042cc <__ssputs_r+0x70>
 8004308:	4650      	mov	r0, sl
 800430a:	6921      	ldr	r1, [r4, #16]
 800430c:	f000 face 	bl	80048ac <_free_r>
 8004310:	e7c7      	b.n	80042a2 <__ssputs_r+0x46>
	...

08004314 <_svfiprintf_r>:
 8004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	4698      	mov	r8, r3
 800431a:	898b      	ldrh	r3, [r1, #12]
 800431c:	4607      	mov	r7, r0
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	460d      	mov	r5, r1
 8004322:	4614      	mov	r4, r2
 8004324:	b09d      	sub	sp, #116	; 0x74
 8004326:	d50e      	bpl.n	8004346 <_svfiprintf_r+0x32>
 8004328:	690b      	ldr	r3, [r1, #16]
 800432a:	b963      	cbnz	r3, 8004346 <_svfiprintf_r+0x32>
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	f000 fb09 	bl	8004944 <_malloc_r>
 8004332:	6028      	str	r0, [r5, #0]
 8004334:	6128      	str	r0, [r5, #16]
 8004336:	b920      	cbnz	r0, 8004342 <_svfiprintf_r+0x2e>
 8004338:	230c      	movs	r3, #12
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	e0d1      	b.n	80044e6 <_svfiprintf_r+0x1d2>
 8004342:	2340      	movs	r3, #64	; 0x40
 8004344:	616b      	str	r3, [r5, #20]
 8004346:	2300      	movs	r3, #0
 8004348:	9309      	str	r3, [sp, #36]	; 0x24
 800434a:	2320      	movs	r3, #32
 800434c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004350:	2330      	movs	r3, #48	; 0x30
 8004352:	f04f 0901 	mov.w	r9, #1
 8004356:	f8cd 800c 	str.w	r8, [sp, #12]
 800435a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004500 <_svfiprintf_r+0x1ec>
 800435e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004362:	4623      	mov	r3, r4
 8004364:	469a      	mov	sl, r3
 8004366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800436a:	b10a      	cbz	r2, 8004370 <_svfiprintf_r+0x5c>
 800436c:	2a25      	cmp	r2, #37	; 0x25
 800436e:	d1f9      	bne.n	8004364 <_svfiprintf_r+0x50>
 8004370:	ebba 0b04 	subs.w	fp, sl, r4
 8004374:	d00b      	beq.n	800438e <_svfiprintf_r+0x7a>
 8004376:	465b      	mov	r3, fp
 8004378:	4622      	mov	r2, r4
 800437a:	4629      	mov	r1, r5
 800437c:	4638      	mov	r0, r7
 800437e:	f7ff ff6d 	bl	800425c <__ssputs_r>
 8004382:	3001      	adds	r0, #1
 8004384:	f000 80aa 	beq.w	80044dc <_svfiprintf_r+0x1c8>
 8004388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438a:	445a      	add	r2, fp
 800438c:	9209      	str	r2, [sp, #36]	; 0x24
 800438e:	f89a 3000 	ldrb.w	r3, [sl]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80a2 	beq.w	80044dc <_svfiprintf_r+0x1c8>
 8004398:	2300      	movs	r3, #0
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a2:	f10a 0a01 	add.w	sl, sl, #1
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	9307      	str	r3, [sp, #28]
 80043aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ae:	931a      	str	r3, [sp, #104]	; 0x68
 80043b0:	4654      	mov	r4, sl
 80043b2:	2205      	movs	r2, #5
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	4851      	ldr	r0, [pc, #324]	; (8004500 <_svfiprintf_r+0x1ec>)
 80043ba:	f000 fa41 	bl	8004840 <memchr>
 80043be:	9a04      	ldr	r2, [sp, #16]
 80043c0:	b9d8      	cbnz	r0, 80043fa <_svfiprintf_r+0xe6>
 80043c2:	06d0      	lsls	r0, r2, #27
 80043c4:	bf44      	itt	mi
 80043c6:	2320      	movmi	r3, #32
 80043c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043cc:	0711      	lsls	r1, r2, #28
 80043ce:	bf44      	itt	mi
 80043d0:	232b      	movmi	r3, #43	; 0x2b
 80043d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d6:	f89a 3000 	ldrb.w	r3, [sl]
 80043da:	2b2a      	cmp	r3, #42	; 0x2a
 80043dc:	d015      	beq.n	800440a <_svfiprintf_r+0xf6>
 80043de:	4654      	mov	r4, sl
 80043e0:	2000      	movs	r0, #0
 80043e2:	f04f 0c0a 	mov.w	ip, #10
 80043e6:	9a07      	ldr	r2, [sp, #28]
 80043e8:	4621      	mov	r1, r4
 80043ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ee:	3b30      	subs	r3, #48	; 0x30
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	d94e      	bls.n	8004492 <_svfiprintf_r+0x17e>
 80043f4:	b1b0      	cbz	r0, 8004424 <_svfiprintf_r+0x110>
 80043f6:	9207      	str	r2, [sp, #28]
 80043f8:	e014      	b.n	8004424 <_svfiprintf_r+0x110>
 80043fa:	eba0 0308 	sub.w	r3, r0, r8
 80043fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004402:	4313      	orrs	r3, r2
 8004404:	46a2      	mov	sl, r4
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	e7d2      	b.n	80043b0 <_svfiprintf_r+0x9c>
 800440a:	9b03      	ldr	r3, [sp, #12]
 800440c:	1d19      	adds	r1, r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	9103      	str	r1, [sp, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfbb      	ittet	lt
 8004416:	425b      	neglt	r3, r3
 8004418:	f042 0202 	orrlt.w	r2, r2, #2
 800441c:	9307      	strge	r3, [sp, #28]
 800441e:	9307      	strlt	r3, [sp, #28]
 8004420:	bfb8      	it	lt
 8004422:	9204      	strlt	r2, [sp, #16]
 8004424:	7823      	ldrb	r3, [r4, #0]
 8004426:	2b2e      	cmp	r3, #46	; 0x2e
 8004428:	d10c      	bne.n	8004444 <_svfiprintf_r+0x130>
 800442a:	7863      	ldrb	r3, [r4, #1]
 800442c:	2b2a      	cmp	r3, #42	; 0x2a
 800442e:	d135      	bne.n	800449c <_svfiprintf_r+0x188>
 8004430:	9b03      	ldr	r3, [sp, #12]
 8004432:	3402      	adds	r4, #2
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9203      	str	r2, [sp, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004510 <_svfiprintf_r+0x1fc>
 8004448:	2203      	movs	r2, #3
 800444a:	4650      	mov	r0, sl
 800444c:	7821      	ldrb	r1, [r4, #0]
 800444e:	f000 f9f7 	bl	8004840 <memchr>
 8004452:	b140      	cbz	r0, 8004466 <_svfiprintf_r+0x152>
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	eba0 000a 	sub.w	r0, r0, sl
 800445a:	fa03 f000 	lsl.w	r0, r3, r0
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	3401      	adds	r4, #1
 8004462:	4303      	orrs	r3, r0
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446a:	2206      	movs	r2, #6
 800446c:	4825      	ldr	r0, [pc, #148]	; (8004504 <_svfiprintf_r+0x1f0>)
 800446e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004472:	f000 f9e5 	bl	8004840 <memchr>
 8004476:	2800      	cmp	r0, #0
 8004478:	d038      	beq.n	80044ec <_svfiprintf_r+0x1d8>
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <_svfiprintf_r+0x1f4>)
 800447c:	bb1b      	cbnz	r3, 80044c6 <_svfiprintf_r+0x1b2>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3307      	adds	r3, #7
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	3308      	adds	r3, #8
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448c:	4433      	add	r3, r6
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	e767      	b.n	8004362 <_svfiprintf_r+0x4e>
 8004492:	460c      	mov	r4, r1
 8004494:	2001      	movs	r0, #1
 8004496:	fb0c 3202 	mla	r2, ip, r2, r3
 800449a:	e7a5      	b.n	80043e8 <_svfiprintf_r+0xd4>
 800449c:	2300      	movs	r3, #0
 800449e:	f04f 0c0a 	mov.w	ip, #10
 80044a2:	4619      	mov	r1, r3
 80044a4:	3401      	adds	r4, #1
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	4620      	mov	r0, r4
 80044aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ae:	3a30      	subs	r2, #48	; 0x30
 80044b0:	2a09      	cmp	r2, #9
 80044b2:	d903      	bls.n	80044bc <_svfiprintf_r+0x1a8>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0c5      	beq.n	8004444 <_svfiprintf_r+0x130>
 80044b8:	9105      	str	r1, [sp, #20]
 80044ba:	e7c3      	b.n	8004444 <_svfiprintf_r+0x130>
 80044bc:	4604      	mov	r4, r0
 80044be:	2301      	movs	r3, #1
 80044c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c4:	e7f0      	b.n	80044a8 <_svfiprintf_r+0x194>
 80044c6:	ab03      	add	r3, sp, #12
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	462a      	mov	r2, r5
 80044cc:	4638      	mov	r0, r7
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <_svfiprintf_r+0x1f8>)
 80044d0:	a904      	add	r1, sp, #16
 80044d2:	f3af 8000 	nop.w
 80044d6:	1c42      	adds	r2, r0, #1
 80044d8:	4606      	mov	r6, r0
 80044da:	d1d6      	bne.n	800448a <_svfiprintf_r+0x176>
 80044dc:	89ab      	ldrh	r3, [r5, #12]
 80044de:	065b      	lsls	r3, r3, #25
 80044e0:	f53f af2c 	bmi.w	800433c <_svfiprintf_r+0x28>
 80044e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e6:	b01d      	add	sp, #116	; 0x74
 80044e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ec:	ab03      	add	r3, sp, #12
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	462a      	mov	r2, r5
 80044f2:	4638      	mov	r0, r7
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <_svfiprintf_r+0x1f8>)
 80044f6:	a904      	add	r1, sp, #16
 80044f8:	f000 f87c 	bl	80045f4 <_printf_i>
 80044fc:	e7eb      	b.n	80044d6 <_svfiprintf_r+0x1c2>
 80044fe:	bf00      	nop
 8004500:	08004b4a 	.word	0x08004b4a
 8004504:	08004b54 	.word	0x08004b54
 8004508:	00000000 	.word	0x00000000
 800450c:	0800425d 	.word	0x0800425d
 8004510:	08004b50 	.word	0x08004b50

08004514 <_printf_common>:
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	4616      	mov	r6, r2
 800451a:	4699      	mov	r9, r3
 800451c:	688a      	ldr	r2, [r1, #8]
 800451e:	690b      	ldr	r3, [r1, #16]
 8004520:	4607      	mov	r7, r0
 8004522:	4293      	cmp	r3, r2
 8004524:	bfb8      	it	lt
 8004526:	4613      	movlt	r3, r2
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800452e:	460c      	mov	r4, r1
 8004530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004534:	b10a      	cbz	r2, 800453a <_printf_common+0x26>
 8004536:	3301      	adds	r3, #1
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	0699      	lsls	r1, r3, #26
 800453e:	bf42      	ittt	mi
 8004540:	6833      	ldrmi	r3, [r6, #0]
 8004542:	3302      	addmi	r3, #2
 8004544:	6033      	strmi	r3, [r6, #0]
 8004546:	6825      	ldr	r5, [r4, #0]
 8004548:	f015 0506 	ands.w	r5, r5, #6
 800454c:	d106      	bne.n	800455c <_printf_common+0x48>
 800454e:	f104 0a19 	add.w	sl, r4, #25
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	6832      	ldr	r2, [r6, #0]
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	42ab      	cmp	r3, r5
 800455a:	dc28      	bgt.n	80045ae <_printf_common+0x9a>
 800455c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004560:	1e13      	subs	r3, r2, #0
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	bf18      	it	ne
 8004566:	2301      	movne	r3, #1
 8004568:	0692      	lsls	r2, r2, #26
 800456a:	d42d      	bmi.n	80045c8 <_printf_common+0xb4>
 800456c:	4649      	mov	r1, r9
 800456e:	4638      	mov	r0, r7
 8004570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d020      	beq.n	80045bc <_printf_common+0xa8>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	68e5      	ldr	r5, [r4, #12]
 800457e:	f003 0306 	and.w	r3, r3, #6
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf18      	it	ne
 8004586:	2500      	movne	r5, #0
 8004588:	6832      	ldr	r2, [r6, #0]
 800458a:	f04f 0600 	mov.w	r6, #0
 800458e:	68a3      	ldr	r3, [r4, #8]
 8004590:	bf08      	it	eq
 8004592:	1aad      	subeq	r5, r5, r2
 8004594:	6922      	ldr	r2, [r4, #16]
 8004596:	bf08      	it	eq
 8004598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800459c:	4293      	cmp	r3, r2
 800459e:	bfc4      	itt	gt
 80045a0:	1a9b      	subgt	r3, r3, r2
 80045a2:	18ed      	addgt	r5, r5, r3
 80045a4:	341a      	adds	r4, #26
 80045a6:	42b5      	cmp	r5, r6
 80045a8:	d11a      	bne.n	80045e0 <_printf_common+0xcc>
 80045aa:	2000      	movs	r0, #0
 80045ac:	e008      	b.n	80045c0 <_printf_common+0xac>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4652      	mov	r2, sl
 80045b2:	4649      	mov	r1, r9
 80045b4:	4638      	mov	r0, r7
 80045b6:	47c0      	blx	r8
 80045b8:	3001      	adds	r0, #1
 80045ba:	d103      	bne.n	80045c4 <_printf_common+0xb0>
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7c4      	b.n	8004552 <_printf_common+0x3e>
 80045c8:	2030      	movs	r0, #48	; 0x30
 80045ca:	18e1      	adds	r1, r4, r3
 80045cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045d6:	4422      	add	r2, r4
 80045d8:	3302      	adds	r3, #2
 80045da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045de:	e7c5      	b.n	800456c <_printf_common+0x58>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4622      	mov	r2, r4
 80045e4:	4649      	mov	r1, r9
 80045e6:	4638      	mov	r0, r7
 80045e8:	47c0      	blx	r8
 80045ea:	3001      	adds	r0, #1
 80045ec:	d0e6      	beq.n	80045bc <_printf_common+0xa8>
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7d9      	b.n	80045a6 <_printf_common+0x92>
	...

080045f4 <_printf_i>:
 80045f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	460c      	mov	r4, r1
 80045fa:	7e27      	ldrb	r7, [r4, #24]
 80045fc:	4691      	mov	r9, r2
 80045fe:	2f78      	cmp	r7, #120	; 0x78
 8004600:	4680      	mov	r8, r0
 8004602:	469a      	mov	sl, r3
 8004604:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800460a:	d807      	bhi.n	800461c <_printf_i+0x28>
 800460c:	2f62      	cmp	r7, #98	; 0x62
 800460e:	d80a      	bhi.n	8004626 <_printf_i+0x32>
 8004610:	2f00      	cmp	r7, #0
 8004612:	f000 80d9 	beq.w	80047c8 <_printf_i+0x1d4>
 8004616:	2f58      	cmp	r7, #88	; 0x58
 8004618:	f000 80a4 	beq.w	8004764 <_printf_i+0x170>
 800461c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004624:	e03a      	b.n	800469c <_printf_i+0xa8>
 8004626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800462a:	2b15      	cmp	r3, #21
 800462c:	d8f6      	bhi.n	800461c <_printf_i+0x28>
 800462e:	a001      	add	r0, pc, #4	; (adr r0, 8004634 <_printf_i+0x40>)
 8004630:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004634:	0800468d 	.word	0x0800468d
 8004638:	080046a1 	.word	0x080046a1
 800463c:	0800461d 	.word	0x0800461d
 8004640:	0800461d 	.word	0x0800461d
 8004644:	0800461d 	.word	0x0800461d
 8004648:	0800461d 	.word	0x0800461d
 800464c:	080046a1 	.word	0x080046a1
 8004650:	0800461d 	.word	0x0800461d
 8004654:	0800461d 	.word	0x0800461d
 8004658:	0800461d 	.word	0x0800461d
 800465c:	0800461d 	.word	0x0800461d
 8004660:	080047af 	.word	0x080047af
 8004664:	080046d1 	.word	0x080046d1
 8004668:	08004791 	.word	0x08004791
 800466c:	0800461d 	.word	0x0800461d
 8004670:	0800461d 	.word	0x0800461d
 8004674:	080047d1 	.word	0x080047d1
 8004678:	0800461d 	.word	0x0800461d
 800467c:	080046d1 	.word	0x080046d1
 8004680:	0800461d 	.word	0x0800461d
 8004684:	0800461d 	.word	0x0800461d
 8004688:	08004799 	.word	0x08004799
 800468c:	680b      	ldr	r3, [r1, #0]
 800468e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	600a      	str	r2, [r1, #0]
 8004698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800469c:	2301      	movs	r3, #1
 800469e:	e0a4      	b.n	80047ea <_printf_i+0x1f6>
 80046a0:	6825      	ldr	r5, [r4, #0]
 80046a2:	6808      	ldr	r0, [r1, #0]
 80046a4:	062e      	lsls	r6, r5, #24
 80046a6:	f100 0304 	add.w	r3, r0, #4
 80046aa:	d50a      	bpl.n	80046c2 <_printf_i+0xce>
 80046ac:	6805      	ldr	r5, [r0, #0]
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	da03      	bge.n	80046bc <_printf_i+0xc8>
 80046b4:	232d      	movs	r3, #45	; 0x2d
 80046b6:	426d      	negs	r5, r5
 80046b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046bc:	230a      	movs	r3, #10
 80046be:	485e      	ldr	r0, [pc, #376]	; (8004838 <_printf_i+0x244>)
 80046c0:	e019      	b.n	80046f6 <_printf_i+0x102>
 80046c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046c6:	6805      	ldr	r5, [r0, #0]
 80046c8:	600b      	str	r3, [r1, #0]
 80046ca:	bf18      	it	ne
 80046cc:	b22d      	sxthne	r5, r5
 80046ce:	e7ef      	b.n	80046b0 <_printf_i+0xbc>
 80046d0:	680b      	ldr	r3, [r1, #0]
 80046d2:	6825      	ldr	r5, [r4, #0]
 80046d4:	1d18      	adds	r0, r3, #4
 80046d6:	6008      	str	r0, [r1, #0]
 80046d8:	0628      	lsls	r0, r5, #24
 80046da:	d501      	bpl.n	80046e0 <_printf_i+0xec>
 80046dc:	681d      	ldr	r5, [r3, #0]
 80046de:	e002      	b.n	80046e6 <_printf_i+0xf2>
 80046e0:	0669      	lsls	r1, r5, #25
 80046e2:	d5fb      	bpl.n	80046dc <_printf_i+0xe8>
 80046e4:	881d      	ldrh	r5, [r3, #0]
 80046e6:	2f6f      	cmp	r7, #111	; 0x6f
 80046e8:	bf0c      	ite	eq
 80046ea:	2308      	moveq	r3, #8
 80046ec:	230a      	movne	r3, #10
 80046ee:	4852      	ldr	r0, [pc, #328]	; (8004838 <_printf_i+0x244>)
 80046f0:	2100      	movs	r1, #0
 80046f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046f6:	6866      	ldr	r6, [r4, #4]
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	bfa8      	it	ge
 80046fc:	6821      	ldrge	r1, [r4, #0]
 80046fe:	60a6      	str	r6, [r4, #8]
 8004700:	bfa4      	itt	ge
 8004702:	f021 0104 	bicge.w	r1, r1, #4
 8004706:	6021      	strge	r1, [r4, #0]
 8004708:	b90d      	cbnz	r5, 800470e <_printf_i+0x11a>
 800470a:	2e00      	cmp	r6, #0
 800470c:	d04d      	beq.n	80047aa <_printf_i+0x1b6>
 800470e:	4616      	mov	r6, r2
 8004710:	fbb5 f1f3 	udiv	r1, r5, r3
 8004714:	fb03 5711 	mls	r7, r3, r1, r5
 8004718:	5dc7      	ldrb	r7, [r0, r7]
 800471a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800471e:	462f      	mov	r7, r5
 8004720:	42bb      	cmp	r3, r7
 8004722:	460d      	mov	r5, r1
 8004724:	d9f4      	bls.n	8004710 <_printf_i+0x11c>
 8004726:	2b08      	cmp	r3, #8
 8004728:	d10b      	bne.n	8004742 <_printf_i+0x14e>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	07df      	lsls	r7, r3, #31
 800472e:	d508      	bpl.n	8004742 <_printf_i+0x14e>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6861      	ldr	r1, [r4, #4]
 8004734:	4299      	cmp	r1, r3
 8004736:	bfde      	ittt	le
 8004738:	2330      	movle	r3, #48	; 0x30
 800473a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800473e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004742:	1b92      	subs	r2, r2, r6
 8004744:	6122      	str	r2, [r4, #16]
 8004746:	464b      	mov	r3, r9
 8004748:	4621      	mov	r1, r4
 800474a:	4640      	mov	r0, r8
 800474c:	f8cd a000 	str.w	sl, [sp]
 8004750:	aa03      	add	r2, sp, #12
 8004752:	f7ff fedf 	bl	8004514 <_printf_common>
 8004756:	3001      	adds	r0, #1
 8004758:	d14c      	bne.n	80047f4 <_printf_i+0x200>
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	b004      	add	sp, #16
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	4834      	ldr	r0, [pc, #208]	; (8004838 <_printf_i+0x244>)
 8004766:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800476a:	680e      	ldr	r6, [r1, #0]
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004772:	061f      	lsls	r7, r3, #24
 8004774:	600e      	str	r6, [r1, #0]
 8004776:	d514      	bpl.n	80047a2 <_printf_i+0x1ae>
 8004778:	07d9      	lsls	r1, r3, #31
 800477a:	bf44      	itt	mi
 800477c:	f043 0320 	orrmi.w	r3, r3, #32
 8004780:	6023      	strmi	r3, [r4, #0]
 8004782:	b91d      	cbnz	r5, 800478c <_printf_i+0x198>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f023 0320 	bic.w	r3, r3, #32
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	2310      	movs	r3, #16
 800478e:	e7af      	b.n	80046f0 <_printf_i+0xfc>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f043 0320 	orr.w	r3, r3, #32
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	2378      	movs	r3, #120	; 0x78
 800479a:	4828      	ldr	r0, [pc, #160]	; (800483c <_printf_i+0x248>)
 800479c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047a0:	e7e3      	b.n	800476a <_printf_i+0x176>
 80047a2:	065e      	lsls	r6, r3, #25
 80047a4:	bf48      	it	mi
 80047a6:	b2ad      	uxthmi	r5, r5
 80047a8:	e7e6      	b.n	8004778 <_printf_i+0x184>
 80047aa:	4616      	mov	r6, r2
 80047ac:	e7bb      	b.n	8004726 <_printf_i+0x132>
 80047ae:	680b      	ldr	r3, [r1, #0]
 80047b0:	6826      	ldr	r6, [r4, #0]
 80047b2:	1d1d      	adds	r5, r3, #4
 80047b4:	6960      	ldr	r0, [r4, #20]
 80047b6:	600d      	str	r5, [r1, #0]
 80047b8:	0635      	lsls	r5, r6, #24
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	d501      	bpl.n	80047c2 <_printf_i+0x1ce>
 80047be:	6018      	str	r0, [r3, #0]
 80047c0:	e002      	b.n	80047c8 <_printf_i+0x1d4>
 80047c2:	0671      	lsls	r1, r6, #25
 80047c4:	d5fb      	bpl.n	80047be <_printf_i+0x1ca>
 80047c6:	8018      	strh	r0, [r3, #0]
 80047c8:	2300      	movs	r3, #0
 80047ca:	4616      	mov	r6, r2
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	e7ba      	b.n	8004746 <_printf_i+0x152>
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	600a      	str	r2, [r1, #0]
 80047d6:	681e      	ldr	r6, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4630      	mov	r0, r6
 80047dc:	6862      	ldr	r2, [r4, #4]
 80047de:	f000 f82f 	bl	8004840 <memchr>
 80047e2:	b108      	cbz	r0, 80047e8 <_printf_i+0x1f4>
 80047e4:	1b80      	subs	r0, r0, r6
 80047e6:	6060      	str	r0, [r4, #4]
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	2300      	movs	r3, #0
 80047ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f2:	e7a8      	b.n	8004746 <_printf_i+0x152>
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	47d0      	blx	sl
 80047fe:	3001      	adds	r0, #1
 8004800:	d0ab      	beq.n	800475a <_printf_i+0x166>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	079b      	lsls	r3, r3, #30
 8004806:	d413      	bmi.n	8004830 <_printf_i+0x23c>
 8004808:	68e0      	ldr	r0, [r4, #12]
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	4298      	cmp	r0, r3
 800480e:	bfb8      	it	lt
 8004810:	4618      	movlt	r0, r3
 8004812:	e7a4      	b.n	800475e <_printf_i+0x16a>
 8004814:	2301      	movs	r3, #1
 8004816:	4632      	mov	r2, r6
 8004818:	4649      	mov	r1, r9
 800481a:	4640      	mov	r0, r8
 800481c:	47d0      	blx	sl
 800481e:	3001      	adds	r0, #1
 8004820:	d09b      	beq.n	800475a <_printf_i+0x166>
 8004822:	3501      	adds	r5, #1
 8004824:	68e3      	ldr	r3, [r4, #12]
 8004826:	9903      	ldr	r1, [sp, #12]
 8004828:	1a5b      	subs	r3, r3, r1
 800482a:	42ab      	cmp	r3, r5
 800482c:	dcf2      	bgt.n	8004814 <_printf_i+0x220>
 800482e:	e7eb      	b.n	8004808 <_printf_i+0x214>
 8004830:	2500      	movs	r5, #0
 8004832:	f104 0619 	add.w	r6, r4, #25
 8004836:	e7f5      	b.n	8004824 <_printf_i+0x230>
 8004838:	08004b5b 	.word	0x08004b5b
 800483c:	08004b6c 	.word	0x08004b6c

08004840 <memchr>:
 8004840:	4603      	mov	r3, r0
 8004842:	b510      	push	{r4, lr}
 8004844:	b2c9      	uxtb	r1, r1
 8004846:	4402      	add	r2, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	4618      	mov	r0, r3
 800484c:	d101      	bne.n	8004852 <memchr+0x12>
 800484e:	2000      	movs	r0, #0
 8004850:	e003      	b.n	800485a <memchr+0x1a>
 8004852:	7804      	ldrb	r4, [r0, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	428c      	cmp	r4, r1
 8004858:	d1f6      	bne.n	8004848 <memchr+0x8>
 800485a:	bd10      	pop	{r4, pc}

0800485c <memcpy>:
 800485c:	440a      	add	r2, r1
 800485e:	4291      	cmp	r1, r2
 8004860:	f100 33ff 	add.w	r3, r0, #4294967295
 8004864:	d100      	bne.n	8004868 <memcpy+0xc>
 8004866:	4770      	bx	lr
 8004868:	b510      	push	{r4, lr}
 800486a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800486e:	4291      	cmp	r1, r2
 8004870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004874:	d1f9      	bne.n	800486a <memcpy+0xe>
 8004876:	bd10      	pop	{r4, pc}

08004878 <memmove>:
 8004878:	4288      	cmp	r0, r1
 800487a:	b510      	push	{r4, lr}
 800487c:	eb01 0402 	add.w	r4, r1, r2
 8004880:	d902      	bls.n	8004888 <memmove+0x10>
 8004882:	4284      	cmp	r4, r0
 8004884:	4623      	mov	r3, r4
 8004886:	d807      	bhi.n	8004898 <memmove+0x20>
 8004888:	1e43      	subs	r3, r0, #1
 800488a:	42a1      	cmp	r1, r4
 800488c:	d008      	beq.n	80048a0 <memmove+0x28>
 800488e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004896:	e7f8      	b.n	800488a <memmove+0x12>
 8004898:	4601      	mov	r1, r0
 800489a:	4402      	add	r2, r0
 800489c:	428a      	cmp	r2, r1
 800489e:	d100      	bne.n	80048a2 <memmove+0x2a>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048aa:	e7f7      	b.n	800489c <memmove+0x24>

080048ac <_free_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4605      	mov	r5, r0
 80048b0:	2900      	cmp	r1, #0
 80048b2:	d043      	beq.n	800493c <_free_r+0x90>
 80048b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b8:	1f0c      	subs	r4, r1, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfb8      	it	lt
 80048be:	18e4      	addlt	r4, r4, r3
 80048c0:	f000 f8d0 	bl	8004a64 <__malloc_lock>
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <_free_r+0x94>)
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	4610      	mov	r0, r2
 80048ca:	b933      	cbnz	r3, 80048da <_free_r+0x2e>
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	6014      	str	r4, [r2, #0]
 80048d0:	4628      	mov	r0, r5
 80048d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048d6:	f000 b8cb 	b.w	8004a70 <__malloc_unlock>
 80048da:	42a3      	cmp	r3, r4
 80048dc:	d90a      	bls.n	80048f4 <_free_r+0x48>
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	1862      	adds	r2, r4, r1
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bf01      	itttt	eq
 80048e6:	681a      	ldreq	r2, [r3, #0]
 80048e8:	685b      	ldreq	r3, [r3, #4]
 80048ea:	1852      	addeq	r2, r2, r1
 80048ec:	6022      	streq	r2, [r4, #0]
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	6004      	str	r4, [r0, #0]
 80048f2:	e7ed      	b.n	80048d0 <_free_r+0x24>
 80048f4:	461a      	mov	r2, r3
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b10b      	cbz	r3, 80048fe <_free_r+0x52>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d9fa      	bls.n	80048f4 <_free_r+0x48>
 80048fe:	6811      	ldr	r1, [r2, #0]
 8004900:	1850      	adds	r0, r2, r1
 8004902:	42a0      	cmp	r0, r4
 8004904:	d10b      	bne.n	800491e <_free_r+0x72>
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	4401      	add	r1, r0
 800490a:	1850      	adds	r0, r2, r1
 800490c:	4283      	cmp	r3, r0
 800490e:	6011      	str	r1, [r2, #0]
 8004910:	d1de      	bne.n	80048d0 <_free_r+0x24>
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4401      	add	r1, r0
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	6053      	str	r3, [r2, #4]
 800491c:	e7d8      	b.n	80048d0 <_free_r+0x24>
 800491e:	d902      	bls.n	8004926 <_free_r+0x7a>
 8004920:	230c      	movs	r3, #12
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	e7d4      	b.n	80048d0 <_free_r+0x24>
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	1821      	adds	r1, r4, r0
 800492a:	428b      	cmp	r3, r1
 800492c:	bf01      	itttt	eq
 800492e:	6819      	ldreq	r1, [r3, #0]
 8004930:	685b      	ldreq	r3, [r3, #4]
 8004932:	1809      	addeq	r1, r1, r0
 8004934:	6021      	streq	r1, [r4, #0]
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6054      	str	r4, [r2, #4]
 800493a:	e7c9      	b.n	80048d0 <_free_r+0x24>
 800493c:	bd38      	pop	{r3, r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	20000340 	.word	0x20000340

08004944 <_malloc_r>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	1ccd      	adds	r5, r1, #3
 8004948:	f025 0503 	bic.w	r5, r5, #3
 800494c:	3508      	adds	r5, #8
 800494e:	2d0c      	cmp	r5, #12
 8004950:	bf38      	it	cc
 8004952:	250c      	movcc	r5, #12
 8004954:	2d00      	cmp	r5, #0
 8004956:	4606      	mov	r6, r0
 8004958:	db01      	blt.n	800495e <_malloc_r+0x1a>
 800495a:	42a9      	cmp	r1, r5
 800495c:	d903      	bls.n	8004966 <_malloc_r+0x22>
 800495e:	230c      	movs	r3, #12
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	2000      	movs	r0, #0
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004966:	f000 f87d 	bl	8004a64 <__malloc_lock>
 800496a:	4921      	ldr	r1, [pc, #132]	; (80049f0 <_malloc_r+0xac>)
 800496c:	680a      	ldr	r2, [r1, #0]
 800496e:	4614      	mov	r4, r2
 8004970:	b99c      	cbnz	r4, 800499a <_malloc_r+0x56>
 8004972:	4f20      	ldr	r7, [pc, #128]	; (80049f4 <_malloc_r+0xb0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	b923      	cbnz	r3, 8004982 <_malloc_r+0x3e>
 8004978:	4621      	mov	r1, r4
 800497a:	4630      	mov	r0, r6
 800497c:	f000 f862 	bl	8004a44 <_sbrk_r>
 8004980:	6038      	str	r0, [r7, #0]
 8004982:	4629      	mov	r1, r5
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f85d 	bl	8004a44 <_sbrk_r>
 800498a:	1c43      	adds	r3, r0, #1
 800498c:	d123      	bne.n	80049d6 <_malloc_r+0x92>
 800498e:	230c      	movs	r3, #12
 8004990:	4630      	mov	r0, r6
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	f000 f86c 	bl	8004a70 <__malloc_unlock>
 8004998:	e7e3      	b.n	8004962 <_malloc_r+0x1e>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	1b5b      	subs	r3, r3, r5
 800499e:	d417      	bmi.n	80049d0 <_malloc_r+0x8c>
 80049a0:	2b0b      	cmp	r3, #11
 80049a2:	d903      	bls.n	80049ac <_malloc_r+0x68>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	441c      	add	r4, r3
 80049a8:	6025      	str	r5, [r4, #0]
 80049aa:	e004      	b.n	80049b6 <_malloc_r+0x72>
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	42a2      	cmp	r2, r4
 80049b0:	bf0c      	ite	eq
 80049b2:	600b      	streq	r3, [r1, #0]
 80049b4:	6053      	strne	r3, [r2, #4]
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f85a 	bl	8004a70 <__malloc_unlock>
 80049bc:	f104 000b 	add.w	r0, r4, #11
 80049c0:	1d23      	adds	r3, r4, #4
 80049c2:	f020 0007 	bic.w	r0, r0, #7
 80049c6:	1ac2      	subs	r2, r0, r3
 80049c8:	d0cc      	beq.n	8004964 <_malloc_r+0x20>
 80049ca:	1a1b      	subs	r3, r3, r0
 80049cc:	50a3      	str	r3, [r4, r2]
 80049ce:	e7c9      	b.n	8004964 <_malloc_r+0x20>
 80049d0:	4622      	mov	r2, r4
 80049d2:	6864      	ldr	r4, [r4, #4]
 80049d4:	e7cc      	b.n	8004970 <_malloc_r+0x2c>
 80049d6:	1cc4      	adds	r4, r0, #3
 80049d8:	f024 0403 	bic.w	r4, r4, #3
 80049dc:	42a0      	cmp	r0, r4
 80049de:	d0e3      	beq.n	80049a8 <_malloc_r+0x64>
 80049e0:	1a21      	subs	r1, r4, r0
 80049e2:	4630      	mov	r0, r6
 80049e4:	f000 f82e 	bl	8004a44 <_sbrk_r>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d1dd      	bne.n	80049a8 <_malloc_r+0x64>
 80049ec:	e7cf      	b.n	800498e <_malloc_r+0x4a>
 80049ee:	bf00      	nop
 80049f0:	20000340 	.word	0x20000340
 80049f4:	20000344 	.word	0x20000344

080049f8 <_realloc_r>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	4607      	mov	r7, r0
 80049fc:	4614      	mov	r4, r2
 80049fe:	460e      	mov	r6, r1
 8004a00:	b921      	cbnz	r1, 8004a0c <_realloc_r+0x14>
 8004a02:	4611      	mov	r1, r2
 8004a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a08:	f7ff bf9c 	b.w	8004944 <_malloc_r>
 8004a0c:	b922      	cbnz	r2, 8004a18 <_realloc_r+0x20>
 8004a0e:	f7ff ff4d 	bl	80048ac <_free_r>
 8004a12:	4625      	mov	r5, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a18:	f000 f830 	bl	8004a7c <_malloc_usable_size_r>
 8004a1c:	42a0      	cmp	r0, r4
 8004a1e:	d20f      	bcs.n	8004a40 <_realloc_r+0x48>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4638      	mov	r0, r7
 8004a24:	f7ff ff8e 	bl	8004944 <_malloc_r>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0f2      	beq.n	8004a14 <_realloc_r+0x1c>
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4622      	mov	r2, r4
 8004a32:	f7ff ff13 	bl	800485c <memcpy>
 8004a36:	4631      	mov	r1, r6
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff ff37 	bl	80048ac <_free_r>
 8004a3e:	e7e9      	b.n	8004a14 <_realloc_r+0x1c>
 8004a40:	4635      	mov	r5, r6
 8004a42:	e7e7      	b.n	8004a14 <_realloc_r+0x1c>

08004a44 <_sbrk_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	2300      	movs	r3, #0
 8004a48:	4d05      	ldr	r5, [pc, #20]	; (8004a60 <_sbrk_r+0x1c>)
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fb feae 	bl	80007b0 <_sbrk>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_sbrk_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_sbrk_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000488 	.word	0x20000488

08004a64 <__malloc_lock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__malloc_lock+0x8>)
 8004a66:	f000 b811 	b.w	8004a8c <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000490 	.word	0x20000490

08004a70 <__malloc_unlock>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__malloc_unlock+0x8>)
 8004a72:	f000 b80c 	b.w	8004a8e <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	20000490 	.word	0x20000490

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a80:	1f18      	subs	r0, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfbc      	itt	lt
 8004a86:	580b      	ldrlt	r3, [r1, r0]
 8004a88:	18c0      	addlt	r0, r0, r3
 8004a8a:	4770      	bx	lr

08004a8c <__retarget_lock_acquire_recursive>:
 8004a8c:	4770      	bx	lr

08004a8e <__retarget_lock_release_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
